[
  {
    "Id": "466319",
    "ThreadId": "219150",
    "Html": "<p>How can we add caption (show text above than arrow line) to arrows/edge, drawing from source to target node...&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-07-12T06:57:55.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "466324",
    "ThreadId": "219150",
    "Html": "<p>You can do that by changing the template, then bind to a vertex/edge property.</p>",
    "PostedDate": "2010-07-12T07:02:59.717-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "466328",
    "ThreadId": "219150",
    "Html": "<p>Thanks for &nbsp;your help, can you please help with code or tell where is its template is defined.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks again. please reply</p>",
    "PostedDate": "2010-07-12T07:05:44.873-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "466733",
    "ThreadId": "219150",
    "Html": "Generic.xaml in Themes. Behaves like normal WPF, so if you have trouble, please read upon WPF.",
    "PostedDate": "2010-07-13T04:53:41.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "467111",
    "ThreadId": "219150",
    "Html": "Thanks for your help. I found its template. Edge template is defined below..\r\n\r\n  &lt;Style TargetType=&quot;{x:Type Controls:EdgeControl}&quot;&gt;\r\n        &lt;Setter Property=&quot;Template&quot;&gt;\r\n            &lt;Setter.Value&gt;\r\n                &lt;ControlTemplate TargetType=&quot;{x:Type Controls:EdgeControl}&quot;&gt;\r\n                    &lt;Path Stroke=&quot;{TemplateBinding Foreground}&quot;\r\n                          StrokeThickness=&quot;{TemplateBinding StrokeThickness}&quot;\r\n                          MinWidth=&quot;1&quot;\r\n                          MinHeight=&quot;1&quot;\r\n                          ToolTip=&quot;{TemplateBinding ToolTip}&quot;\r\n                          x:Name=&quot;edgePath&quot;&gt;\r\n                        &lt;Path.Data&gt;\r\n                            &lt;PathGeometry&gt;\r\n                                &lt;PathGeometry.Figures&gt;\r\n                                    &lt;MultiBinding Converter=&quot;{StaticResource routeToPathConverter}&quot;&gt;\r\n                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot;\r\n                                                 Path=&quot;Source.(Controls:GraphCanvas.X)&quot; /&gt;\r\n                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot;\r\n                                                 Path=&quot;Source.(Controls:GraphCanvas.Y)&quot; /&gt;\r\n                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot;\r\n                                                 Path=&quot;Source.ActualWidth&quot; /&gt;\r\n                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot;\r\n                                                 Path=&quot;Source.ActualHeight&quot; /&gt;\r\n                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot;\r\n                                                 Path=&quot;Target.(Controls:GraphCanvas.X)&quot; /&gt;\r\n                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot;\r\n                                                 Path=&quot;Target.(Controls:GraphCanvas.Y)&quot; /&gt;\r\n                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot;\r\n                                                 Path=&quot;Target.ActualWidth&quot; /&gt;\r\n                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot;\r\n                                                 Path=&quot;Target.ActualHeight&quot; /&gt;\r\n                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot;\r\n                                                 Path=&quot;RoutePoints&quot; /&gt;\r\n                                    &lt;/MultiBinding&gt;\r\n                                &lt;/PathGeometry.Figures&gt;\r\n                            &lt;/PathGeometry&gt;\r\n                        &lt;/Path.Data&gt;\r\n                    &lt;/Path&gt;\r\n                &lt;/ControlTemplate&gt;\r\n            &lt;/Setter.Value&gt;\r\n        &lt;/Setter&gt;\r\n        &lt;Setter Property=&quot;Controls:GraphElementBehaviour.HighlightTrigger&quot;\r\n                Value=&quot;{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}&quot; /&gt;\r\n        &lt;Setter Property=&quot;MinWidth&quot;\r\n                Value=&quot;1&quot; /&gt;\r\n        &lt;Setter Property=&quot;MinHeight&quot;\r\n                Value=&quot;1&quot; /&gt;\r\n        &lt;Setter Property=&quot;Background&quot;\r\n                Value=&quot;Red&quot; /&gt;\r\n        &lt;Setter Property=&quot;Foreground&quot;\r\n                Value=&quot;Silver&quot; /&gt;\r\n        &lt;Setter Property=&quot;Opacity&quot;\r\n                Value=&quot;0.5&quot; /&gt;\r\n        &lt;Style.Triggers&gt;\r\n            &lt;Trigger Property=&quot;Controls:GraphElementBehaviour.IsHighlighted&quot;\r\n                     Value=&quot;True&quot;&gt;\r\n                &lt;Setter Property=&quot;Foreground&quot;\r\n                        Value=&quot;Black&quot; /&gt;\r\n            &lt;/Trigger&gt;\r\n            &lt;Trigger Property=&quot;Controls:GraphElementBehaviour.IsSemiHighlighted&quot;\r\n                     Value=&quot;True&quot;&gt;\r\n                &lt;Setter Property=&quot;Foreground&quot;\r\n                        Value=&quot;Yellow&quot; /&gt;\r\n            &lt;/Trigger&gt;\r\n            &lt;MultiTrigger&gt;\r\n                &lt;MultiTrigger.Conditions&gt;\r\n                    &lt;Condition Property=&quot;Controls:GraphElementBehaviour.IsSemiHighlighted&quot;\r\n                               Value=&quot;True&quot; /&gt;\r\n                    &lt;Condition Property=&quot;Controls:GraphElementBehaviour.SemiHighlightInfo&quot;\r\n                               Value=&quot;InEdge&quot; /&gt;\r\n                &lt;/MultiTrigger.Conditions&gt;\r\n                &lt;Setter Property=&quot;Foreground&quot;\r\n                        Value=&quot;Red&quot; /&gt;\r\n            &lt;/MultiTrigger&gt;\r\n            &lt;MultiTrigger&gt;\r\n                &lt;MultiTrigger.Conditions&gt;\r\n                    &lt;Condition Property=&quot;Controls:GraphElementBehaviour.IsSemiHighlighted&quot;\r\n                               Value=&quot;True&quot; /&gt;\r\n                    &lt;Condition Property=&quot;Controls:GraphElementBehaviour.SemiHighlightInfo&quot;\r\n                               Value=&quot;OutEdge&quot; /&gt;\r\n                &lt;/MultiTrigger.Conditions&gt;\r\n                &lt;Setter Property=&quot;Foreground&quot;\r\n                        Value=&quot;Blue&quot; /&gt;\r\n            &lt;/MultiTrigger&gt;\r\n        &lt;/Style.Triggers&gt;\r\n    &lt;/Style&gt;\r\n\r\n\r\n\r\nand it is getting shape of Path FIgure by this converter code...\r\n\r\npublic class EdgeRouteToPathConverter : IMultiValueConverter\r\n\t{\r\n\t\tpublic object Convert( object[] values, Type targetType, object parameter, System.Globalization.CultureInfo culture )\r\n\t\t{\r\n\t\t\tDebug.Assert( values != null && values.Length == 9, &quot;EdgeRouteToPathConverter should have 9 parameters: pos (1,2), size (3,4) of source; pos (5,6), size (7,8) of target; routeInformation (9).&quot; );\r\n\r\n\t\t\t#region Get the inputs\r\n\t\t\t//get the position of the source\r\n\t\t\tPoint sourcePos = new Point()\r\n\t\t\t                  \t{\r\n\t\t\t                  \t\tX = ( values[0] != DependencyProperty.UnsetValue ? (double)values[0] : 0.0 ),\r\n\t\t\t                  \t\tY = ( values[1] != DependencyProperty.UnsetValue ? (double)values[1] : 0.0 )\r\n\t\t\t                  \t};\r\n\t\t\t//get the size of the source\r\n\t\t\tSize sourceSize = new Size()\r\n\t\t\t                  \t{\r\n\t\t\t                  \t\tWidth = ( values[2] != DependencyProperty.UnsetValue ? (double)values[2] : 0.0 ),\r\n\t\t\t                  \t\tHeight = ( values[3] != DependencyProperty.UnsetValue ? (double)values[3] : 0.0 )\r\n\t\t\t                  \t};\r\n\t\t\t//get the position of the target\r\n\t\t\tPoint targetPos = new Point()\r\n\t\t\t                  \t{\r\n\t\t\t                  \t\tX = ( values[4] != DependencyProperty.UnsetValue ? (double)values[4] : 0.0 ),\r\n\t\t\t                  \t\tY = ( values[5] != DependencyProperty.UnsetValue ? (double)values[5] : 0.0 )\r\n\t\t\t                  \t};\r\n\t\t\t//get the size of the target\r\n\t\t\tSize targetSize = new Size()\r\n\t\t\t                  \t{\r\n\t\t\t                  \t\tWidth = ( values[6] != DependencyProperty.UnsetValue ? (double)values[6] : 0.0 ),\r\n\t\t\t                  \t\tHeight = ( values[7] != DependencyProperty.UnsetValue ? (double)values[7] : 0.0 )\r\n\t\t\t                  \t};\r\n\r\n\t\t\t//get the route informations\r\n\t\t\tPoint[] routeInformation = ( values[8] != DependencyProperty.UnsetValue ? (Point[])values[8] : null );\r\n\t\t\t#endregion\r\n\t\t\tbool hasRouteInfo = routeInformation != null && routeInformation.Length &gt; 0;\r\n\r\n\t\t\t//\r\n\t\t\t// Create the path\r\n\t\t\t//\r\n\t\t\tPoint p1 = GraphConverterHelper.CalculateAttachPoint( sourcePos, sourceSize, ( hasRouteInfo ? routeInformation[0] : targetPos ) );\r\n\t\t\tPoint p2 = GraphConverterHelper.CalculateAttachPoint( targetPos, targetSize, ( hasRouteInfo ? routeInformation[routeInformation.Length - 1] : sourcePos ) );\r\n\r\n\r\n\t\t\tPathSegment[] segments = new PathSegment[1 + ( hasRouteInfo ? routeInformation.Length : 0 )];\r\n\t\t\tif ( hasRouteInfo )\r\n\t\t\t\t//append route points\r\n\t\t\t\tfor ( int i = 0; i &lt; routeInformation.Length; i++ )\r\n\t\t\t\t\tsegments[i] = new LineSegment( routeInformation[i], true );\r\n\r\n\t\t\tPoint pLast = ( hasRouteInfo ? routeInformation[routeInformation.Length - 1] : p1 );\r\n\t\t\tVector v = pLast - p2;\r\n\t\t\tv = v / v.Length * 5;\r\n\t\t\tVector n = new Vector( -v.Y, v.X ) * 0.3;\r\n\r\n\t\t\tsegments[segments.Length - 1] = new LineSegment( p2 + v, true );\r\n\r\n\r\n          \r\n            PathFigureCollection pfc = new PathFigureCollection(2);            \r\n                        \r\n\tpfc.Add(new PathFigure( p1, segments, false ) );\r\n\r\n            pfc.Add(new PathFigure( p2,\r\n                                     new PathSegment[] {\r\n                                            \r\n                                         new LineSegment(p2 + v - n, true),                                                                                  \r\n                                                        new LineSegment(p2 + v + n, true)}, true ) );\r\n                                   \r\n\t\t\treturn pfc;\r\n\t\t}\r\n\r\n\t\tpublic object[] ConvertBack( object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture )\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\nJUST WONDERING HOW I CAN EMBED MY DESIRED TEXT HERE......PLZ SUGGEST\r\n",
    "PostedDate": "2010-07-14T00:20:29.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "467122",
    "ThreadId": "219150",
    "Html": "<p>See this post for a starter: <a href=\"http://graphsharp.codeplex.com/Thread/View.aspx?ThreadId=72119\">http://graphsharp.codeplex.com/Thread/View.aspx?ThreadId=72119</a>&nbsp;</p>",
    "PostedDate": "2010-07-14T00:51:49.883-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]