[
  {
    "Id": "196237",
    "ThreadId": "58043",
    "Html": "<p>Hi,&nbsp;</p>\r\n<p>Is it possible to hook a mouse click (or mouse over) event to vertices, so 'business-load' information associated with a vertex can be displayed on a side panel or some custom action can be performed?</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-05-31T20:43:20.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "199543",
    "ThreadId": "58043",
    "Html": "<p>Yes, you can do it. In the next tutorial i'll show you that.</p>",
    "PostedDate": "2009-06-09T08:00:23.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "226275",
    "ThreadId": "58043",
    "Html": "<p>Hi palesz,</p>\r\n<p>I want also to know how to manipulate with mouse events on particular edge or vertex.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>",
    "PostedDate": "2009-08-21T04:54:29.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "256279",
    "ThreadId": "58043",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>palesz wrote:</strong><br>\r\n<p>Yes, you can do it. In the next tutorial i'll show you that.</p>\r\n</blockquote>\r\n<p>Which tutorial is the best one to look at for this?</p>\r\n<p><strong>EDIT: </strong>I just looked for the tutorials and there's only one at present, and although it was last modified just after this discussion originally took place it's not the one that shows how to handle mouse events. Awwww :(</p>\r\n<p>Cheers,</p>\r\n<p>G.</p>",
    "PostedDate": "2009-11-12T04:01:40.75-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519316",
    "ThreadId": "58043",
    "Html": "\r\n<p>We are still waiting for your next tutorial ;)</p>\r\n",
    "PostedDate": "2010-11-09T05:34:00.92-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "547343",
    "ThreadId": "58043",
    "Html": "\r\n<p>any update on how to do this?</p>\r\n",
    "PostedDate": "2011-01-11T08:21:06.53-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "685722",
    "ThreadId": "58043",
    "Html": "<div style=\"color: black; background-color: white;\">\n<pre>Ok guys, I dont know much about graphsharp, I&acute;m learning along the way... I have found this solution and it works for me:</pre>\n<pre>All that you need is define a style for VertexControl and add an EventSetter for the event you want to raise.</pre>\n<pre><br /></pre>\n<pre><span style=\"color: #ff0000;\"><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">Style</span> TargetType</span><span style=\"color: #0000ff;\">=</span><span style=\"color: #a31515;\"><span style=\"color: #0000ff;\">\"{</span>x<span style=\"color: #0000ff;\">:</span>Type <span style=\"color: #ff0000;\">graphsharp</span><span style=\"color: #0000ff;\">:</span><span style=\"color: #ff0000;\">VertexControl</span><span style=\"color: #0000ff;\">}\"</span></span><span style=\"color: #0000ff;\">&gt;</span></pre>\n<pre>       <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">EventSetter</span> <span style=\"color: #ff0000;\">Event</span><span style=\"color: #0000ff;\">=</span><span style=\"color: #a31515;\"><span style=\"color: #0000ff;\">\"</span>MouseDoubleClick<span style=\"color: #0000ff;\">\"</span></span> <span style=\"color: #ff0000;\">Handler</span><span style=\"color: #0000ff;\">=</span><span style=\"color: #a31515;\"><span style=\"color: #0000ff;\">\"</span>v_MouseDoubleClick<span style=\"color: #0000ff;\">\"</span></span><span style=\"color: #0000ff;\">/&gt;</span></pre>\n</div>\n<div style=\"color: black; background-color: white;\">\n<pre style=\"color: black;\"><span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">Style</span><span style=\"color: #0000ff;\">&gt;</span>\n</pre>\n<pre style=\"color: black;\"><br /></pre>\n<pre style=\"color: black;\">And code behind could be like this:</pre>\n<pre style=\"color: black;\"><div style=\"color: black; background-color: white;\"><pre><span style=\"color: #0000ff;\"><div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> v_MouseDoubleClick(<span style=\"color: blue;\">object</span> sender, MouseButtonEventArgs e)\n{        \n   <span style=\"color: green;\">//Do what you need   </span>\n   e.Handled = <span style=\"color: blue;\">true</span>;\n}</pre>\n<pre><br /></pre>\n<pre>I hope it helps.</pre>\n</div>\n</span></pre>\n</div>\n</pre>\n</div>",
    "PostedDate": "2011-10-18T06:03:13.367-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686189",
    "ThreadId": "58043",
    "Html": "<p>Hi dmartel,</p>\r\n<p>first of all I am also learning along the way... but I've done the following. I neded a context menue for each vertex.</p>\r\n<p>In PocVertex class I installed a RoutedCommand</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">#region</span> VertexContextCommand\r\n\r\n        <span style=\"color: blue;\">private</span> CommandModel _vertexContextCommand;\r\n        <span style=\"color: blue;\">public</span> CommandModel VertexContextCommandModel\r\n        {\r\n            <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> _vertexContextCommand; }\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">class</span> VertexContextCommand : CommandModel\r\n        {\r\n\r\n            <span style=\"color: blue;\">public</span> VertexContextCommand()\r\n            {\r\n               \r\n            }\r\n\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnQueryEnabled(<span style=\"color: blue;\">object</span> sender, CanExecuteRoutedEventArgs e)\r\n            {\r\n                <span style=\"color: blue;\">string</span> symbol = e.Parameter <span style=\"color: blue;\">as</span> <span style=\"color: blue;\">string</span>;\r\n\r\n                <span style=\"color: green;\">//e.CanExecute = (!string.IsNullOrEmpty(symbol));</span>\r\n                e.CanExecute = <span style=\"color: blue;\">true</span>;\r\n                e.Handled = <span style=\"color: blue;\">true</span>;\r\n            }\r\n\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnExecute(<span style=\"color: blue;\">object</span> sender, ExecutedRoutedEventArgs e)\r\n            {\r\n                PocVertex pv = e.Parameter <span style=\"color: blue;\">as</span> PocVertex;\r\n\r\n                <span style=\"color: blue;\">if</span> (pv.OnContextClick != <span style=\"color: blue;\">null</span>)\r\n                {\r\n                    pv.OnContextClick(pv);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        <span style=\"color: blue;\">#endregion</span>\r\n</pre>\r\n</div>\r\n<br /><br />I also installed a ClickHandler (here for a context menue) whicht puts the command through to my VieModel so that I get there<br />the result at one place with an info about the source vetex. The Handler is installed when each vertex is created, like:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>pv.OnContextClick += VertexContextClick;\r\n<br />\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">delegate</span> <span style=\"color: blue;\">void</span> ContextClickHandler(PocVertex p);\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> ContextClickHandler OnContextClick;\r\n\r\n\r\n<span style=\"color: blue;\">public</span> ContextClickHandler GetOnContextClick()\r\n        {\r\n            <span style=\"color: blue;\">return</span> OnContextClick;\r\n        }\r\n<br /></pre>\r\n</div>\r\nHere is the xaml code snippet for that:<br />\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>\r\n<span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Style</span> <span style=\"color: red;\">TargetType</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{x:Type graphsharp:VertexControl}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n\r\n                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Setter</span> <span style=\"color: red;\">Property</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">ContextMenu</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n                    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Setter.Value</span><span style=\"color: blue;\">&gt;</span>\r\n                        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContextMenu</span> <span style=\"color: blue;\">&gt;</span>\r\n                           \r\n                            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">MenuItem</span> <span style=\"color: red;\">Header</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Browser</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Command</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding VertexContextCommandModel.Command}</span><span style=\"color: black;\">\"</span>\r\n                                    <span style=\"color: red;\">CommandParameter</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding myClassAddress}</span><span style=\"color: black;\">\"</span>\r\n                                    <span style=\"color: red;\">local:CreateCommandBinding.Command</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding VertexContextCommandModel}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">ContextMenu</span><span style=\"color: blue;\">&gt;</span>\r\n                    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Setter.Value</span><span style=\"color: blue;\">&gt;</span>\r\n                <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Setter</span><span style=\"color: blue;\">&gt;</span><br /><br />and here is the base class for VertexContextCommand, CommandModel.cs</pre>\r\n</div>\r\n</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><br /><div style=\"color: black; background-color: white;\"><pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\r\n<span style=\"color: blue;\">using</span> System.Text;\r\n<span style=\"color: blue;\">using</span> System.Windows.Input;\r\n\r\n<span style=\"color: blue;\">namespace</span> MyApp.Commands\r\n{\r\n    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n    <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Model for a command</span>\r\n    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">abstract</span> <span style=\"color: blue;\">class</span> CommandModel\r\n    {\r\n        <span style=\"color: blue;\">public</span> CommandModel()\r\n        {\r\n            _routedCommand = <span style=\"color: blue;\">new</span> RoutedCommand();\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Routed command associated with the model.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: blue;\">public</span> RoutedCommand Command\r\n        {\r\n            <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> _routedCommand; }\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Determines if a command is enabled. Override to provide custom behavior. Do not call the</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> base version when overriding.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> OnQueryEnabled(<span style=\"color: blue;\">object</span> sender, CanExecuteRoutedEventArgs e)\r\n        {\r\n            e.CanExecute = <span style=\"color: blue;\">true</span>;\r\n            e.Handled = <span style=\"color: blue;\">true</span>;\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Function to execute the command.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">abstract</span> <span style=\"color: blue;\">void</span> OnExecute(<span style=\"color: blue;\">object</span> sender, ExecutedRoutedEventArgs e);\r\n\r\n        <span style=\"color: blue;\">private</span> RoutedCommand _routedCommand;\r\n    }\r\n}<br /><br />Hope that helps anyhow...<br /><br />NBT0511 <br /></pre>\r\n</div>\r\n<br /><br /><br />&nbsp;</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-10-18T23:33:55.19-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]