[
  {
    "Id": "468097",
    "ThreadId": "219658",
    "Html": "<p>To achieve layout of vertexes from left to right. I am writing following code.<br>\r\n<pre>[SAMPLE CODE]\r\n\r\ntry\r\n{\r\nlayout.OverlapRemovalConstraint = AlgorithmConstraints.Must;\r\n}\r\ncatch (Exception ex)\r\n{&nbsp;\r\n}\r\ntry\r\n{\r\nlayout.EdgeRoutingConstraint = AlgorithmConstraints.Must;\r\n}\r\ncatch (Exception ex)\r\n{&nbsp;\r\n}\r\nGraphSharp.Algorithms.OverlapRemoval.OverlapRemovalParameters overlapRemoval = new GraphSharp.Algorithms.OverlapRemoval.OverlapRemovalParameters();\r\noverlapRemoval.HorizontalGap = 100;&nbsp;\r\noverlapRemoval.VerticalGap = 0;\r\nlayout.OverlapRemovalParameters = overlapRemoval;&nbsp;\r\n\r\nBOTH STATEMENTS IN TRY CATCH BLOCKS GENERATES FOLLOWING EXCEPTION SO AS A WORK AROUND I WROTE THEM IN TRY CATCH&nbsp;\r\n\r\nIndex was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\nat System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)\r\nat System.ThrowHelper.ThrowArgumentOutOfRangeException()\r\nat System.Collections.Generic.List`1.get_Item(Int32 index)\r\nat GraphSharp.Controls.GraphLayout`3.ChangeState(Int32 stateIndex)\r\nat GraphSharp.Controls.GraphLayout`3.RecalculateOverlapRemoval()\r\nat GraphSharp.Controls.GraphLayout`3.OverlapRemovalConstraint_PropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)\r\nat System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\r\nat System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\r\nat System.Windows.DependencyObject.NotifyPropertyChange(DependencyPropertyChangedEventArgs args)\r\nat System.Windows.DependencyObject.UpdateEffectiveValue(EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry oldEntry, EffectiveValueEntry&amp; newEntry, Boolean coerceWithDeferredReference, OperationType operationType)\r\nat System.Windows.DependencyObject.SetValueCommon(DependencyProperty dp, Object value, PropertyMetadata metadata, Boolean coerceWithDeferredReference, OperationType operationType, Boolean isInternal)\r\nat System.Windows.DependencyObject.SetValue(DependencyProperty dp, Object value)\r\nat GraphSharp.Controls.GraphLayout`3.set_OverlapRemovalConstraint(AlgorithmConstraints value)\r\n\r\n</pre>\r\n<br><br>AS OUTPUT I GET ALL VERTEXES FROM LEFT TO RIGHT BUT VERTEXES ARE OVERLAPPING WHICH IS MAKING READABILITY ALMOST IMPOSSIBLE. JUST WONDERING IF THERE IS ANY SOLUTION FOR THIS.<br><br>tHANKS</p>",
    "PostedDate": "2010-07-15T23:52:56.817-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]