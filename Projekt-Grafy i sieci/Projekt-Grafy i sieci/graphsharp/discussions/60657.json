[
  {
    "Id": "205452",
    "ThreadId": "60657",
    "Html": "<p>Hey guys!</p>\r\n<p>I've been playing around with G# and I think im starting to get very good results, but I have a question I cant figure out.</p>\r\n<p>I'm changing the text in a vertex in runtime, but I cant get the graphlayout to refresh it in the graphlayout. I thought that the &quot;Relayout()&quot; method would help me, but it doesnt. It keeps showing the old value. How can I update my graph view?</p>\r\n<p>&nbsp;</p>\r\n<p>TY!</p>",
    "PostedDate": "2009-06-25T07:30:59.763-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206186",
    "ThreadId": "60657",
    "Html": "<p>Hi!</p>\r\n<p>The reasons that it doesn't work:</p>\r\n<ul>\r\n<li>i think your vertex does not implement the INotifyPropertyChanged interface, so the UI doesn't get any notification about the text changing</li>\r\n<li>the relayout method does not creates new controls for the vertices (only for the new vertices, or it removes the deleted ones), so the same UI controls will show the vertex after you call the Relayout method</li>\r\n</ul>\r\n<p>What you can do, to solve your problem:</p>\r\n<ul>\r\n<li>Brute-force solution:\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>yourLayoutControl.Graph = <span style=\"color:Blue\">null</span>; <span style=\"color:Green\">//at this point the vertexcontrols will be purged</span>\r\nyourLayoutControl.Graph = yourGraph; <span style=\"color:Green\">//at this point new vertexcontrols will be created</span>\r\n</pre>\r\n</div>\r\n</li>\r\n<li>&quot;Elegant way&quot;: implement the INotifyPropertyChanged method in your vertex-type or modify the datatemplate of the vertices</li>\r\n</ul>\r\n<p>palesz</p>",
    "PostedDate": "2009-06-27T05:45:48.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206197",
    "ThreadId": "60657",
    "Html": "<p>I don have implemented that interface as you well say. Im trying to figure out how to make it work but im not getting many results, could you show me a simple sample of how to make it work?</p>\r\n<p>&nbsp;</p>\r\n<p>This is what I have</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><div style=\"color:Black;background-color:White\"><pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> State: INotifyPropertyChanged </span>{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> nameValue;\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\r\n<br>    <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> NotifyPropertyChanged(String info)\r\n    {\r\n        <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>)\r\n            PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> System.ComponentModel.PropertyChangedEventArgs(info));\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> name\r\n    {\r\n        <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>.nameValue; }\r\n        <span style=\"color:Blue\">set</span>\r\n        {<br>            <span style=\"color:Blue\">if</span> (value != <span style=\"color:Blue\">this</span>.nameValue) <span style=\"color:Blue\">this</span>.nameValue = value;\r\n         }\r\n    }\r\n} \r\n<br>which I use as vertex and I change the name property a form in the application. So what should I write in the graph-section of<br>the code so that the graph updates the names?<br><br><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">foreach</span> (State s <span style=\"color:Blue\">in</span> state)\r\n{\r\n    s.PropertyChanged += <span style=\"color:Blue\">new</span> System.ComponentModel.PropertyChangedEventHandler(s_PropertyChanged);\r\n    g.AddVertex(s);\r\n}\r\n\r\n<span style=\"color:Blue\">void</span> s_PropertyChanged(<span style=\"color:Blue\">object</span> sender, System.ComponentModel.PropertyChangedEventArgs e)\r\n{\r\n    ????<br>}</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2009-06-27T07:41:59.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206244",
    "ThreadId": "60657",
    "Html": "<p>&nbsp;</p>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> State: INotifyPropertyChanged </span>{</pre>\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> nameValue;\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\r\n\r\n    <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> NotifyPropertyChanged(String info)\r\n    {\r\n        <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>)\r\n            PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> System.ComponentModel.PropertyChangedEventArgs(info));\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> name\r\n    {\r\n        <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>.nameValue; }\r\n        <span style=\"color:Blue\">set</span>\r\n        {\r\n            <span style=\"color:Blue\">if</span> (value != <span style=\"color:Blue\">this</span>.nameValue) {\r\n                <span style=\"color:Blue\">this</span>.nameValue = value;\r\n                NotifyPropertyChanged(<span style=\"color:#A31515\">&quot;name&quot;</span>); <span style=\"color:Green\">//this is the MISSING LINE!!!</span>\r\n            }\r\n         }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-27T13:23:58.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206272",
    "ThreadId": "60657",
    "Html": "<p>Still nothing :( I will copy the whole code so that you see what Im dealing with. First the State.cs</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">namespace</span> PFCEditor\r\n{\r\n    <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> State:System.ComponentModel.INotifyPropertyChanged\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> id;\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> nameValue;\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> NotifyPropertyChanged(String info)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> System.ComponentModel.PropertyChangedEventArgs(info));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> name\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>.nameValue;\r\n            }\r\n           \r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (value != <span style=\"color:Blue\">this</span>.nameValue)\r\n                {\r\n                    <span style=\"color:Blue\">this</span>.nameValue = value;\r\n                    NotifyPropertyChanged(<span style=\"color:#A31515\">&quot;name&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        <span style=\"color:Blue\">public</span> State(<span style=\"color:Blue\">int</span> id, <span style=\"color:Blue\">string</span> name)\r\n        {\r\n            <span style=\"color:Blue\">this</span>.id = id;\r\n            <span style=\"color:Blue\">this</span>.name = name;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">string</span> ToString()\r\n        {\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>.name;\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>and now the UserControl with the diagram</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Diagram : UserControl\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> BidirectionalGraph&lt;<span style=\"color:Blue\">object</span>, IEdge&lt;<span style=\"color:Blue\">object</span>&gt;&gt; _graphtovisualize;\r\n       \r\n        <span style=\"color:Blue\">public</span> BidirectionalGraph&lt;<span style=\"color:Blue\">object</span>, IEdge&lt;<span style=\"color:Blue\">object</span>&gt;&gt; GraphToVisualize\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _graphtovisualize; }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> Diagram(<span style=\"color:Blue\">string</span> filename)\r\n        {\r\n            CreateNewGraph();\r\n            InitializeComponent();\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> CreateNewGraph()\r\n        {\r\n\r\n            <span style=\"color:Green\">//BLABLABLA. Picking up info on the states...</span>\r\n\r\n            <span style=\"color:Blue\">foreach</span> (State s <span style=\"color:Blue\">in</span> state)\r\n            {\r\n                s.PropertyChanged += <span style=\"color:Blue\">new</span> System.ComponentModel.PropertyChangedEventHandler(s_PropertyChanged);\r\n                g.AddVertex(s);\r\n            }\r\n\r\n            <span style=\"color:Blue\">foreach</span> (Edge&lt;<span style=\"color:Blue\">object</span>&gt; e <span style=\"color:Blue\">in</span> edge)\r\n            {\r\n                g.AddEdge(e);\r\n            }\r\n\r\n            <span style=\"color:Blue\">this</span>._graphtovisualize = g;\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> s_PropertyChanged(<span style=\"color:Blue\">object</span> sender, System.ComponentModel.PropertyChangedEventArgs e)\r\n        {\r\n               <span style=\"color:Green\">//Not sure what to put here...</span>\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-06-27T18:21:55.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206305",
    "ThreadId": "60657",
    "Html": "<p>Ok, now i see the real problem, you don't have a DataTemplate for the state class. So in the XAML file of your UserControl add those things:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">UserControl</span> <span style=\"color:Red\">...</span>\r\n                    <span style=\"color:Red\">xmlns:myns</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:PCFEditor[OPTIONALLY needed this: ;assembly=assembly_name_which_contains_your_state_class_if_its_not_the_same_as_your_usercontrol's_assemlby_(without_dll_postfix)]</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">UserControl.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Green\">&lt;!-- define with a datatemplate how to show your state class--&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">DataType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type myns:state}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=name,Mode=OneWay}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">UserControl.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n\r\n    <span style=\"color:Green\">&lt;!-- here is the GraphLayout Control --&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">UserControl</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>and beside that you &nbsp;need to make your state class public and you don't need the&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>s.PropertyChanged += <span style=\"color:Blue\">new</span> System.ComponentModel.PropertyChangedEventHandler(s_PropertyChanged);\r\n</pre>\r\n</div>\r\n<p>line and the</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">void</span> s_PropertyChanged(<span style=\"color:Blue\">object</span> sender, System.ComponentModel.PropertyChangedEventArgs e)\r\n        {\r\n               <span style=\"color:Green\">//Not sure what to put here...</span>\r\n        }\r\n</pre>\r\n</div>\r\n<p>event handler method, the WPF knows how to handle the INotifyPropertyChanged interface, you only needed to implement the interface the WPF take care of the changes (changing the text, ... via the Binding)</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-28T01:18:01.933-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206324",
    "ThreadId": "60657",
    "Html": "<p>I love you, dude :) Thanks for the support :)</p>",
    "PostedDate": "2009-06-28T05:27:07.813-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]