[
  {
    "Id": "233508",
    "ThreadId": "68634",
    "Html": "<p>Good day,</p>\r\n<p>Is is possible to make custom vertices on a IBidirectional graph.</p>\r\n<p>The overloaded vertex should have a image, label and id.</p>\r\n<p>Any thoughts on this?</p>\r\n<p>Regards,</p>\r\n<p>rootme</p>",
    "PostedDate": "2009-09-11T04:01:16.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "233731",
    "ThreadId": "68634",
    "Html": "<p>Use a DataTemplate and/or a UserControl:</p>\r\n<p>MyVertexRenderer.xaml</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">UserControl</span> \r\n     <span style=\"color:Red\">...</span> \r\n     <span style=\"color:Red\">x:Class</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">MyNamespace.MyVertexRenderer</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n     <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBox</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding MyText}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n     <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">UserControl</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Then inside the VertexControl style in GraphEditor.xaml</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Style</span> <span style=\"color:Red\">TargetType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type Controls:VertexControl}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n     <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Template</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter.Value</span><span style=\"color:Blue\">&gt;</span>\r\n                 <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ControlTemplate</span> <span style=\"color:Red\">TargetType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type Controls:VertexControl}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Border</span> <span style=\"color:Red\">...</span><span style=\"color:Blue\">&gt;</span>\r\n                           <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n                                <span style=\"color:Green\">&lt;!-- ONE OF THE FOLLOWING: --&gt;</span>\r\n                                <span style=\"color:Green\">&lt;!-- 1, USE CONTROL DIRECTLY --&gt;</span>\r\n\t                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">mynamespace</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">MyVertexRenderer</span>\r\n                                     <span style=\"color:Red\">DataContext</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{TemplateBinding Vertex}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n                                <span style=\"color:Green\">&lt;!-- 2, USE DATATEMPLATE --&gt;</span>\r\n                            \t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ContentPresenter</span>\r\n                                     <span style=\"color:Red\">Content</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{TemplateBinding Vertex}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n                           <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n                      <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Border</span><span style=\"color:Blue\">&gt;</span>\r\n                 ...\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>With &quot;2&quot;, let's say you have a IBidirectionalGraph&lt;MyVertex...&gt; where MyVertex is your data class, next make a DataTemplate something like this inside the resources section of GraphEditor.xaml</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">DataType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type mynamespace:MyVertex}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n     <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">mynamespace</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">MyVertexRenderer</span><span style=\"color:Blue\">/&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>This will allow you to have multiple renderers for multiple data types; e.g. create an abstract class (MyVertex) for the generics (IBidirectionalGraph etc), then create your vertex classes (MyVertexTypeA, MyVertexTypeB...) then duplicate the last snippet altering the DataType tag to point the various data types and your renderer(s).</p>\r\n<p>Good luck!</p>",
    "PostedDate": "2009-09-11T12:41:25.163-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234011",
    "ThreadId": "68634",
    "Html": "<p>Thank you for your reply ourben.</p>\r\n<p>I think I see where this is going but I'm gonna ask anyway:</p>\r\n<p>Currently I visualise my graph as a normal IBidirectional graph right?</p>\r\n<ol>\r\n<li>First I get the input from the user.</li>\r\n<li>Next I calculate relationships(edges) between the vertices.</li>\r\n<li>Finally I create the graph by adding the edges and vertices and set the graph as the source for the graphlayout.</li>\r\n</ol>\r\n<p>Now for the questions:</p>\r\n<ol>\r\n<li>If I use my own Vertex user control, will the AddVertex still work or will I have to write an overload for it?</li>\r\n<li>If I create a User Control with Image, TextBox and id will I be able to just go eg. graph.Vertices[0].Image.Source=&quot;Image.gif&quot;, or the textbox text or whatever?</li>\r\n<li>More questions sure to come, just short on time at the moment.</li>\r\n</ol>\r\n<p>Sorry if I sound like an idiot but I'm really trying to understand what I have to do so that I can do it myself, not just ask for someone else to do it for me.</p>\r\n<p>Thank you in advance,</p>\r\n<p>rootme</p>",
    "PostedDate": "2009-09-13T05:23:00.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234027",
    "ThreadId": "68634",
    "Html": "<p>When you <strong>AddVertex</strong> you act on the graph (QuickGraph) and <strong>not</strong> the visual (GraphSharp) representation. VertexControl is the class GraphSharp uses to render and layout the QuickGraph graph handed to it, which is why AddVertex takes a parameter of type TVertex where TVertex is defined in your implementation of the IBidirectionalGraph&lt;TVertex, TEdge&gt; generic.</p>\r\n<p>If you create your graph as IBidirectional&lt;<strong>string</strong>, IEdge&lt;<strong>string</strong>, <strong>string</strong>&gt;&gt;</p>\r\n<ul>\r\n<li>AddVertex takes a <strong>string</strong></li>\r\n<li>AddEdge takes an IEdge&lt;<strong>string</strong>, <strong>string</strong>&gt;, Edge&lt;<strong>string</strong>, <strong>string</strong>&gt;, or two strings (<strong>string</strong>, <strong>string</strong>)<strong><br></strong></li>\r\n<li>GraphSharp uses the x:Type Controls:VertexControl template - as it would with any vertex type</li>\r\n<li>The DataTemplate for <strong>string</strong> (if you created one in the resources section) will be used to render the content of VertexControl.Vertex (as it is a <strong>string</strong>)</li>\r\n</ul>\r\n<p>The method I described doesn't really create a &quot;new&quot; vertex control, it just changes the <strong>content </strong>of the existing user control.</p>\r\n<p>A tip is to make your base Vertex type a DependencyObject ancestor with the relevant DependencyProperty(ies) and then when graph.Vertices[0].MyProperty = value updates the QuickGraph graph, it will automatically propagate to the renderer <em>(bypassing any GraphSharp classes - UserControl already gave the reference to your Vertex to your own vertex renderer)</em> through WPF's DependencyProperty system.</p>\r\n<p>These snippets (of the top of my head, forgive any syntax errors) should give you an idea what's going on:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Green\">&lt;!-- with the style something like... --&gt;</span><br><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">DataType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type myns:MyVertexBase}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n   <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Label</span><span style=\"color:Blue\">&gt;</span>{Binding Name}<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Label</span><span style=\"color:Blue\">&gt;</span>\r\n   <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<span style=\"color:Green\">&lt;!-- OR... --&gt;</span><span style=\"color:Blue\">&nbsp;</span><span style=\"color:Blue\"><br><br>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">DataType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type myns:MyVertexBase}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n   <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">myns</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">MyVertexRenderer</span><span style=\"color:Blue\">/&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n\r\n<span style=\"color:Green\">&lt;!-- ... and elsewhere ...--&gt;</span>\r\n\r\n<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">UserControl</span> <span style=\"color:Red\">...</span> <span style=\"color:Red\">x:Class</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">MyNamespace.MyVertexRenderer</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n   <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Label</span><span style=\"color:Blue\">&gt;</span>{Binding Name}<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Label</span><span style=\"color:Blue\">&gt;</span>\r\n   <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">UserControl</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n</span></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Green\">// a base vertex class something like</span>\r\n<span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyVertexBase : DependencyObject </span>{\r\n\r\n   <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty NameProperty =\r\n      DependencyProperty.Register(<span style=\"color:#A31515\">&quot;Name&quot;</span>, <span style=\"color:Blue\">typeof</span>(<span style=\"color:Blue\">string</span>), <span style=\"color:Blue\">typeof</span>(MyVertexBase);\r\n\r\n   <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> Name {\r\n      <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> (<span style=\"color:Blue\">string</span>)GetValue(NameProperty); }\r\n      <span style=\"color:Blue\">set</span> { SetValue(StringProperty, value); }\r\n\r\n}\r\n\r\n<span style=\"color:Green\">// elsewhere, after creating your graph</span>\r\nBidirectionalGraph&lt;MyVertexBase, IEdge&lt;MyVertexBase&gt;&gt; graph\r\n    = SomeGraphCreatorMethod(...);\r\n\r\n<span style=\"color:Green\">// add a vertex</span>\r\ngraph.AddVertex(<span style=\"color:Blue\">new</span> MyVertexBase() { Name = <span style=\"color:#A31515\">&quot;foo&quot;</span> } );\r\n\r\n<span style=\"color:Green\">// change it</span>\r\ngraph.Vertices[0].Name = <span style=\"color:#A31515\">&quot;bar&quot;</span>;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-13T07:54:16.177-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234030",
    "ThreadId": "68634",
    "Html": "<p>PS: The properties don't actually *need* to be DependencyProperty when using DataTemplate, but if you come to refactor later and a new renderer doesn't use DataTemplate, you'll curse having to write in all the public static readonly should-be-sugar... so much so you might find find yourself advising everyone to do it all the time (like I am, woe is me) :-)</p>",
    "PostedDate": "2009-09-13T08:01:18.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234266",
    "ThreadId": "68634",
    "Html": "<p>Hi ourben,</p>\r\n<p>I attempted to do as you told(No changes or alterations) but I get the following error when I do this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">var</span> g = <span style=\"color:Blue\">new</span> BidirectionalGraph&lt;MyVertexBase, IEdge&lt;MyVertexBase&gt;&gt;();<br><br>Image i = new Image();<br><br>g.AddVertex(<span style=\"color:Blue\">new</span> MyVertexBase() { Name = <span style=\"color:#A31515\">&quot;foo&quot;</span> , Image = i});<br><br><span style=\"color:#ff0000\">graphLayout.Graph = g;<br></span></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#ff0000\">Error&nbsp;&nbsp; &nbsp;1&nbsp;&nbsp; &nbsp;Cannot implicitly convert type 'QuickGraph.BidirectionalGraph&lt;WpfApplication1.MyVertexBase,QuickGraph.IEdge&lt;WpfApplication1.MyVertexBase&gt;&gt;' to 'QuickGraph.IBidirectionalGraph&lt;object,QuickGraph.IEdge&lt;object&gt;&gt;'. An explicit conversion exists (are you missing a cast?)</span></p>\r\n<p>On to other things...</p>\r\n<p>The error:</p>\r\n<p>&nbsp;</p>\r\n<pre><span style=\"color:Blue\"><pre><pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">DataTemplate</span> <span style=\"color:red\">DataType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type thisApp:MyVertexBase}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><br>            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span><br>                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Label</span><span style=\"color:blue\">&gt;</span>{Binding Name}<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Label</span><span style=\"color:blue\">&gt;</span><br>                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Image</span><span style=\"color:blue\">&gt;</span>{Binding Image}<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Image</span><span style=\"color:blue\">&gt;</span><br>            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span><br><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">DataTemplate</span><span style=\"color:blue\">&gt;</span><br><span style=\"color:#ff0000\">Error&nbsp;&nbsp; &nbsp;1&nbsp;&nbsp; &nbsp;The Element type 'System.Windows.Controls.Image' does not have an associated TypeConverter to parse the string '{Binding Image}'.<br></span><br>I am quite new to the DependencyProperties so I'm trying to understand them.<br><br>Thank's for all the help!<br><br>rootme</pre>\r\n</pre>\r\n</span></pre>",
    "PostedDate": "2009-09-14T04:54:54.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234329",
    "ThreadId": "68634",
    "Html": "<p>Sorry, I neglected to mention, you want to create a bare class to wrap the GraphLayout generic (this is what GraphEditor in the download example does)</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyGraphLayout\r\n   : GraphSharp.Controls.GraphLayout&lt;MyVertexBase, MyEdgeBase, MyGraph&gt;\r\n</span>{ <span style=\"color:Green\">/* nothing to do here... */</span> }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Then in the GraphEditor.mxml (or wherever you declare the layout in MXML), swap &lt;Controls:GraphLayout*..&gt; for something like&lt;mynamespace:MyGraphLayout..&gt;</p>\r\n<p>note: MyEdgeBase, again a bare class that inherits from Edge&lt;MyVertexBase&gt; and MyGraph is a bare class that inherits from BidirectionalGraph&lt;MyVertexBase, MyEdgeBase&gt;</p>\r\n<p>As for the dependency properties, I'm not sure (I'm new to WPF too), but I'd hazard a guess that error wouldn't happen if replaced &lt;Image&gt;{Binding ...}&lt;/Image&gt; for &lt;Image Source=&quot;{Binding ...}&quot;/&gt;</p>\r\n<p>Let me know how it goes!</p>\r\n<p>&nbsp;</p>\r\n<p>* edit: it's Controls:GraphLayout, not Controls:GraphEditor as originally posted... my bad.</p>",
    "PostedDate": "2009-09-14T08:01:44.2-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234624",
    "ThreadId": "68634",
    "Html": "<p>Ok, I think were getting closer...</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyEdgeBase : QuickGraph.Edge&lt;MyVertexBase&gt;\r\n    </span>{\r\n        <span style=\"color:Green\">/* nothing to do here... */</span> \r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Gives me this error: <span style=\"color:#ff0000\">'QuickGraph.Edge&lt;WpfApplication1.MyVertexBase&gt;' does not contain a constructor that takes '0' arguments</span></p>\r\n<p>So here is MyVertexBase:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Green\">// a base vertex class something like</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyVertexBase : DependencyObject \r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty NameProperty =\r\n            DependencyProperty.Register(<span style=\"color:#A31515\">&quot;Name&quot;</span>, <span style=\"color:Blue\">typeof</span>(<span style=\"color:Blue\">string</span>), <span style=\"color:Blue\">typeof</span>(MyVertexBase));\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> Name \r\n        {\r\n          <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> (<span style=\"color:Blue\">string</span>)GetValue(NameProperty); }\r\n          <span style=\"color:Blue\">set</span> { SetValue(NameProperty, value); }\r\n        }\r\n        \r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty ImageProperty =\r\n           DependencyProperty.Register(<span style=\"color:#A31515\">&quot;Image&quot;</span>, <span style=\"color:Blue\">typeof</span>(Image), <span style=\"color:Blue\">typeof</span>(MyVertexBase));\r\n\r\n        <span style=\"color:Blue\">public</span> Image Image\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> (Image)GetValue(ImageProperty); }\r\n            <span style=\"color:Blue\">set</span> { SetValue(ImageProperty, value); }\r\n        }\r\n    }   \r\n</pre>\r\n</div>\r\n</p>\r\n<p>I dont understand how to pass the dependency object arguments when the class is being inherited???</p>\r\n<p>I tried putting a constructor like:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> MyVertexBase()\r\n{\r\n\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>intside the class but no joy.</p>\r\n<p>Finally with MyGraphLayout: Will I still be able to specify the LayoutAlgortihm ect.</p>\r\n<p>Thanks again for your patience and sharing your knowlege with me!</p>\r\n<p>Cheers,</p>\r\n<p>rootme</p>",
    "PostedDate": "2009-09-15T00:14:42.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234678",
    "ThreadId": "68634",
    "Html": "<p>I'm not in the office at the moment, but I'd guess the 0 argument constructor error is happening because you are trying to create an edge programmatically. Here is from memory what I have:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Green\">/*abstract*/</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyEdgeBase : Edge&lt;MyVertexBase&gt;\r\n</span>{\r\n   <span style=\"color:Green\">// bare constructor</span>\r\n   <span style=\"color:Blue\">public</span> MyEdgeBase(MyVertexBase fromvertex, MyVertexBase tovertex)\r\n      : <span style=\"color:Blue\">base</span>(fromvertex, tovertex)\r\n   {\r\n   }\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>That said, your error does say you are calling the ctor with no parameters, so double the line number associated with the error.</p>\r\n<p>When I create an Edge I use:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">var</span> verta = <span style=\"color:Blue\">new</span> MyVertexBase();\r\n<span style=\"color:Blue\">var</span> vertb = <span style=\"color:Blue\">new</span> MyVertexBase();\r\n<span style=\"color:Green\">// create an edge like</span>\r\n<span style=\"color:Blue\">var</span> edge = <span style=\"color:Blue\">new</span> MyEdgeBase(verta, vertb);\r\ngraph.AddEdge(edge);\r\n<span style=\"color:Green\">// or</span>\r\ngraph.AddEdge(verta, vertb);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>The code for MyVertexBase looks fine to me.&nbsp; Perhaps I don't understand the question?</p>\r\n<p>As for the final query, yes, it works just the same as Controls:GraphLayout - all the parameters (attributes in xaml) are members on the GraphLayout&lt;a,b,c&gt; ancestor.</p>",
    "PostedDate": "2009-09-15T04:36:26.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234711",
    "ThreadId": "68634",
    "Html": "<p>Ahh... Of course... Im an idiot...</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre> <span style=\"color:Blue\">public</span> MyEdgeBase(MyVertexBase fromvertex, MyVertexBase tovertex)\r\n      : <span style=\"color:Blue\">base</span>(fromvertex, tovertex)\r\n   {\r\n   }\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Everything else seems fine except I get this Unknown error:</p>\r\n<p><span style=\"color:#ff0000\">Unknown build error, 'GenericArguments[1], 'WpfApplication1.MyEdgeBase', on 'GraphSharp.Algorithms.Highlight.IHighlightController`3[TVertex,TEdge,TGraph]' violates the constraint of type parameter 'TEdge'. Line 145 Position 30.'</span></p>\r\n<p><span style=\"color:#000000\">Maybe a inherited class for the IHighlightController?</span></p>\r\n<p>And finally, you were right, not that I doubted you, the new GraphLayout control works as normal now that the constructor is sorted out.</p>",
    "PostedDate": "2009-09-15T06:34:40.597-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234714",
    "ThreadId": "68634",
    "Html": "<p>I'm not sure about that one?</p>\r\n<p>When I was using the latest source before Contracts was removed I sometimes got weird errors but rebuild made them disappear.</p>\r\n<p>Your edge type inherits from Edge which is a QuickGraph type and it definitely implements IEdge (the only constraint it could complain about).</p>\r\n<p>QuickGraph Edge <a title=\"http://quickgraph.codeplex.com/sourcecontrol/changeset/view/36564?projectName=quickgraph#280638\" href=\"http://quickgraph.codeplex.com/sourcecontrol/changeset/view/36564?projectName=quickgraph#280638\">http://quickgraph.codeplex.com/sourcecontrol/changeset/view/36564?projectName=quickgraph#280638</a></p>\r\n<p>GraphSharp IHighlightController <a title=\"http://graphsharp.codeplex.com/sourcecontrol/changeset/view/28030?projectName=graphsharp#441880\" href=\"http://graphsharp.codeplex.com/sourcecontrol/changeset/view/28030?projectName=graphsharp#441880\">http://graphsharp.codeplex.com/sourcecontrol/changeset/view/28030?projectName=graphsharp#441880</a></p>\r\n<p>If you have no luck tracking the bug down, put your GraphLayout, Vertex and Edge class source on here or a pastie and I'll see if anything stands out.</p>",
    "PostedDate": "2009-09-15T06:52:38.32-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234722",
    "ThreadId": "68634",
    "Html": "<p>Ok here it is:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyGraphLayout : GraphSharp.Controls.GraphLayout&lt;MyVertexBase, MyEdgeBase, MyGraph&gt;\r\n    </span>{ \r\n        <span style=\"color:Green\">/* nothing to do here... */</span> \r\n    }\r\n\r\n<br><br><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyVertexBase : DependencyObject \r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty NameProperty =\r\n            DependencyProperty.Register(<span style=\"color:#A31515\">&quot;Name&quot;</span>, <span style=\"color:Blue\">typeof</span>(<span style=\"color:Blue\">string</span>), <span style=\"color:Blue\">typeof</span>(MyVertexBase));\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> Name \r\n        {\r\n          <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> (<span style=\"color:Blue\">string</span>)GetValue(NameProperty); }\r\n          <span style=\"color:Blue\">set</span> { SetValue(NameProperty, value); }\r\n        }\r\n        \r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty ImageProperty =\r\n           DependencyProperty.Register(<span style=\"color:#A31515\">&quot;Image&quot;</span>, <span style=\"color:Blue\">typeof</span>(Image), <span style=\"color:Blue\">typeof</span>(MyVertexBase));\r\n\r\n        <span style=\"color:Blue\">public</span> Image Image\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> (Image)GetValue(ImageProperty); }\r\n            <span style=\"color:Blue\">set</span> { SetValue(ImageProperty, value); }\r\n        }\r\n    }\r\n\r\n<br><br><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyEdgeBase : Edge&lt;MyVertexBase&gt;\r\n    </span>{\r\n        <span style=\"color:Green\">/* nothing to do here... */</span>\r\n\r\n        <span style=\"color:Blue\">public</span> MyEdgeBase(MyVertexBase fromvertex, MyVertexBase tovertex)\r\n            : <span style=\"color:Blue\">base</span>(fromvertex, tovertex)\r\n        {\r\n\r\n        }\r\n\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Ok. In what time zone do you live? I just want to know so that I roughly know what time to expect replies(i.e. not while you are sleeping)</p>\r\n<p>Again, thank you very much for everything.</p>",
    "PostedDate": "2009-09-15T07:08:36.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "235016",
    "ThreadId": "68634",
    "Html": "<p>Ok. I sorted out the Unknow error.</p>\r\n<p>Now I get thi<span style=\"color:#ff0000\"><span style=\"color:#000000\">s</span>:</span></p>\r\n<p><span style=\"color:#ff0000\">\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">var</span> g = <span style=\"color:Blue\">new</span> BidirectionalGraph&lt;MyVertexBase, IEdge&lt;MyVertexBase&gt;&gt;();\r\n            <br>Image i = <span style=\"color:Blue\">new</span> Image();\r\n<br>i.Source = <span style=\"color:#A31515\">&quot;Individual.gif&quot;</span>;\r\n\r\ng.AddVertex(<span style=\"color:Blue\">new</span> MyVertexBase() { Name = <span style=\"color:#A31515\">&quot;Bob&quot;</span> , Image = i });\r\n\r\n\r\ngraphLayout.Graph = g;\r\n</pre>\r\n</div>\r\n</span></p>\r\n<p><span style=\"color:#ff0000\">Cannot implicitly convert type 'QuickGraph.BidirectionalGraph&lt;WpfApplication1.MyVertexBase,QuickGraph.IEdge&lt;WpfApplication1.MyVertexBase&gt;&gt;' to 'WpfApplication1.MyGraph'</span></p>\r\n<p>Here is MyGraph aswell:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyGraph : QuickGraph.BidirectionalGraph&lt;MyVertexBase, MyEdgeBase&gt;\r\n    </span>{\r\n        <span style=\"color:Green\">/* nothing to do here... */</span> \r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>\r\n<p>Regards,</p>\r\n<p>rootme</p>",
    "PostedDate": "2009-09-15T23:45:39.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236014",
    "ThreadId": "68634",
    "Html": "<p>Anyone? Please, Im stuck. :(</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-18T06:03:09.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236069",
    "ThreadId": "68634",
    "Html": "<p>Try this one:</p>\r\n<p>&nbsp;</p>\r\n<pre style=\"color:#000000;font-family:Consolas, 'Courier New', Courier, monospace;font-size:11px;margin:8px\"><span style=\"color:blue\">var</span> g = <span style=\"color:blue\">new</span> MyGraph();</pre>",
    "PostedDate": "2009-09-18T08:06:48.597-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236100",
    "ThreadId": "68634",
    "Html": "<p>Ahh... Of course!</p>\r\n<p>Thank you so much palesz, but now I still have one last problem, if you could spare me a moment of your time.</p>\r\n<p>When I do:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">var</span> g = <span style=\"color:Blue\">new</span> MyGraph();\r\n            \r\nImage i = <span style=\"color:Blue\">new</span> Image();\r\n\r\n<span style=\"color:Green\">//Set the source of the image to a valid source...</span>\r\n\r\ng.AddVertex(<span style=\"color:Blue\">new</span> MyVertexBase() { Name = <span style=\"color:#A31515\">&quot;Bob&quot;</span> , Image = i });\r\n\r\n\r\ngraphLayout.Graph = g;\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>The graph layout only display's text showing &quot;{Binding Name}&quot;. No image or &quot;Bob&quot;.</p>\r\n<p>Any thoughts on what I am doing wrong?</p>",
    "PostedDate": "2009-09-18T08:57:15.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236373",
    "ThreadId": "68634",
    "Html": "<p>That's because you're using the {Binding ...} syntax at the wrong place. Try this template:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">DataType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type thisApp:MyVertexBase}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Label</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Name}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span><span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Label</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Image</span> <span style=\"color:Red\">Source</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Image}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span><span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Image</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-19T01:01:35.237-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236381",
    "ThreadId": "68634",
    "Html": "<p>Thank you for the reply palesz.</p>\r\n<p>Just 2 things:</p>\r\n<p>For anyone else following this Label does not have a property Text. It is Content.</p>\r\n<p>And my Image still wont show :/</p>\r\n<p>Any ideas why?</p>",
    "PostedDate": "2009-09-19T03:19:13.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236419",
    "ThreadId": "68634",
    "Html": "<p>Ok, then try this template (because how i see, you are creating Image objects in your MyVertexBase):</p>\r\n<p>&nbsp;</p>\r\n<pre style=\"font-size:1em;font-family:Consolas, 'Courier New', Courier, monospace\"><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">DataTemplate</span> <span style=\"color:red\">DataType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type thisApp:MyVertexBase}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Label</span> <span style=\"color:#ff0000\">Content</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Name}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Label</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:blue\"><span style=\"color:#a31515\">ContentControl</span></span> <span style=\"color:#ff0000\">Content</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Image}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:blue\"><span style=\"color:#a31515\">ContentControl</span></span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">DataTemplate</span><span style=\"color:blue\">&gt;</span></pre>",
    "PostedDate": "2009-09-19T08:10:59.153-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236433",
    "ThreadId": "68634",
    "Html": "<p>Yay.... It works! Just edited the template, otherwise the text is behind the image and I want it below.<br>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\"><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">DataType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type thisApp:MyVertexBase}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">StackPanel</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ContentControl</span> <span style=\"color:Red\">Content</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Image}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span><span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ContentControl</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Label</span> <span style=\"color:Red\">Content</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Name}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span><span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Label</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">StackPanel</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<br></span></pre>\r\n</div>\r\n</p>\r\n<p>Also added horizontal alignment center for both.</p>\r\n<p>Thank you so much for your guidance palesz!</p>",
    "PostedDate": "2009-09-19T11:16:44.437-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "487119",
    "ThreadId": "68634",
    "Html": "<p>@rootme It would be great if you would post your final code and maybe summarize what you learned so that others can benefit from the long training session presented by these posts.</p>",
    "PostedDate": "2010-08-31T11:06:40.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "493607",
    "ThreadId": "68634",
    "Html": "<p>Yes please!&nbsp; I'm trying my best to duplicate what rootme achieved, but I'm having a hard time piecing everything together.&nbsp; If rootme has left the thread for good, would someone else be willing to put together some sort of a walkthrough on this?</p>",
    "PostedDate": "2010-09-14T18:38:10.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "507562",
    "ThreadId": "68634",
    "Html": "<p>Here's what I am using (and it's working so far):</p>\r\n<p>I have the following saved as MyGraphLayout.cs</p>\r\n<hr>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyGraph : GraphSharp.SoftMutableBidirectionalGraph&lt;MyVertexBase, MyEdgeBase&gt;\r\n    {\r\n        <span style=\"color:green\">/* nothing to do here... */</span>\r\n    }\r\n\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyGraphLayout : GraphSharp.Controls.GraphLayout&lt;MyVertexBase, MyEdgeBase, MyGraph&gt;\r\n    {\r\n        <span style=\"color:green\">/* nothing to do here... */</span>\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyVertexBase : DependencyObject\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty NameProperty =\r\n            DependencyProperty.Register(<span style=\"color:#a31515\">&quot;Name&quot;</span>, <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">string</span>), <span style=\"color:blue\">typeof</span>(MyVertexBase));\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Name\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">string</span>)GetValue(NameProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(NameProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty ImageProperty =\r\n           DependencyProperty.Register(<span style=\"color:#a31515\">&quot;Image&quot;</span>, <span style=\"color:blue\">typeof</span>(Image), <span style=\"color:blue\">typeof</span>(MyVertexBase));\r\n\r\n        <span style=\"color:blue\">public</span> Image Image\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (Image)GetValue(ImageProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(ImageProperty, value); }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyEdgeBase : Edge&lt;MyVertexBase&gt;\r\n    {\r\n        <span style=\"color:green\">/* nothing to do here... */</span>\r\n\r\n        <span style=\"color:blue\">public</span> MyEdgeBase(MyVertexBase fromvertex, MyVertexBase tovertex)\r\n            : <span style=\"color:blue\">base</span>(fromvertex, tovertex)\r\n        {\r\n\r\n        }\r\n\r\n    }\r\n\r\n<hr></pre>\r\n<pre>Then I've got the following XAML in a UserControl (it also shows a sample tooltip and context menu):</pre>\r\n<pre><hr></pre>\r\n<pre><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">UserControl</span> <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Relations.Views.MapViewerControl</span><span style=\"color:black\">&quot;</span>\r\n             <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span>\r\n             <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span>\r\n             <span style=\"color:red\">xmlns:mc</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.openxmlformats.org/markup-compatibility/2006</span><span style=\"color:black\">&quot;</span> \r\n             <span style=\"color:red\">xmlns:zoom</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:WPFExtensions.Controls;assembly=WPFExtensions</span><span style=\"color:black\">&quot;</span>\r\n             <span style=\"color:red\">xmlns:thisApp</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:Relations</span><span style=\"color:black\">&quot;</span>\r\n             <span style=\"color:red\">xmlns:d</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/expression/blend/2008</span><span style=\"color:black\">&quot;</span> \r\n             <span style=\"color:red\">mc:Ignorable</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">d</span><span style=\"color:black\">&quot;</span> \r\n             <span style=\"color:red\">d:DesignHeight</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">300</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">d:DesignWidth</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">300</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid.Resources</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:green\">&lt;!-- template for a grid vertex --&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">DataTemplate</span> <span style=\"color:red\">DataType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type thisApp:MyVertexBase}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border</span> <span style=\"color:red\">BorderThickness</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">3</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">CornerRadius</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">6</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Padding</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">3</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">BorderBrush</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">#FF900404</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n                    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border.ContextMenu</span><span style=\"color:blue\">&gt;</span>\r\n                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ContextMenu</span><span style=\"color:blue\">&gt;</span>\r\n                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">MenuItem</span> <span style=\"color:red\">Header</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Link To</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Click</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">MenuItem_Click</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Tag</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n                        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ContextMenu</span><span style=\"color:blue\">&gt;</span>\r\n                    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border.ContextMenu</span><span style=\"color:blue\">&gt;</span>\r\n                    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border.ToolTip</span><span style=\"color:blue\">&gt;</span>\r\n                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ToolTip</span><span style=\"color:blue\">&gt;</span>\r\n                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Name, StringFormat='Tooltip for {0}'}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n                        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ToolTip</span><span style=\"color:blue\">&gt;</span>\r\n                    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border.ToolTip</span><span style=\"color:blue\">&gt;</span>\r\n                    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid.RowDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">RowDefinition</span> <span style=\"color:blue\">/&gt;</span>\r\n                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">RowDefinition</span> <span style=\"color:blue\">/&gt;</span>\r\n                        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid.RowDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid.ColumnDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ColumnDefinition</span> <span style=\"color:blue\">/&gt;</span>\r\n                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ColumnDefinition</span> <span style=\"color:blue\">/&gt;</span>\r\n                        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid.ColumnDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Image</span> <span style=\"color:red\">Source</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Image}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Height</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">24</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Grid.Row</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">0</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Grid.Column</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">0</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span> \r\n                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Grid.Row</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">0</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Grid.Column</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Name}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">FontSize</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">14</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">FontWeight</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Black</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Other stuff goes here...</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">FontSize</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Grid.Row</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Grid.ColumnSpan</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">2</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n                    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">DataTemplate</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid.Resources</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">zoom</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ZoomControl</span> <span style=\"color:red\">AllowDrop</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">True</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Drop</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">DropHandler</span><span style=\"color:black\">&quot;</span>  <span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">thisApp</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">MyGraphLayout</span> <span style=\"color:red\">Graph</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding GraphToVisualize}</span><span style=\"color:black\">&quot;</span>\r\n                                   <span style=\"color:red\">LayoutAlgorithmType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">FR</span><span style=\"color:black\">&quot;</span>\r\n                                   <span style=\"color:red\">OverlapRemovalAlgorithmType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">FSA</span><span style=\"color:black\">&quot;</span>\r\n                                   <span style=\"color:red\">HighlightAlgorithmType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Simple</span><span style=\"color:black\">&quot;</span>                                   \r\n                                   <span style=\"color:red\">AsyncCompute</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">true</span><span style=\"color:black\">&quot;</span>\r\n                                   <span style=\"color:red\">ShowAllStates</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">false</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">zoom</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ZoomControl</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">UserControl</span><span style=\"color:blue\">&gt;</span>\r\n<hr></pre>\r\n<pre>Then I've got the following code behind (you'll see the drop side of Drag &amp; Drop that I'm using to add verticies dynamically):</pre>\r\n<pre><hr></pre>\r\n<pre>﻿<div style=\"color:black;background-color:white\"><pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> MapViewerControl : UserControl\r\n    {\r\n        MapViewerViewModel viewModel;\r\n\r\n        <span style=\"color:blue\">public</span> MapViewerControl()\r\n        {\r\n            viewModel = <span style=\"color:blue\">new</span> MapViewerViewModel();\r\n            InitializeComponent();\r\n            Loaded += <span style=\"color:blue\">new</span> RoutedEventHandler(MapViewerControl_Loaded);\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> MapViewerControl_Loaded(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            DataContext = viewModel;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> DropHandler(<span style=\"color:blue\">object</span> sender, DragEventArgs e)\r\n        {\r\n            Data.Object objToAdd = e.Data.GetData(<span style=\"color:blue\">typeof</span>(Data.Object)) <span style=\"color:blue\">as</span> Data.Object;\r\n            <span style=\"color:blue\">if</span> (objToAdd != <span style=\"color:blue\">null</span>)\r\n            {\r\n                viewModel.AddVertex(objToAdd);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> MenuItem_Click(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">var</span> menuItem = sender <span style=\"color:blue\">as</span> MenuItem;\r\n            <span style=\"color:blue\">if</span> (menuItem != <span style=\"color:blue\">null</span> &amp;&amp; menuItem.Tag != <span style=\"color:blue\">null</span>)\r\n            {\r\n                <span style=\"color:blue\">var</span> vertex = menuItem.Tag <span style=\"color:blue\">as</span> MyVertexBase;\r\n                <span style=\"color:blue\">if</span> (vertex != <span style=\"color:blue\">null</span>)\r\n                {\r\n                    MessageBox.Show(<span style=\"color:#a31515\">&quot;You want to link &quot;</span> + vertex.Name + <span style=\"color:#a31515\">&quot; to ...?&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n<hr></pre>\r\n<pre>And here's the View Model that I'm using (I'm using the MvvmLight framework, that's where ViewModelBase comes from):</pre>\r\n<pre><hr></pre>\r\n<pre><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MapViewerViewModel : ViewModelBase\r\n    {\r\n        <span style=\"color:blue\">public</span> MapViewerViewModel()\r\n        {\r\n            GraphToVisualize = <span style=\"color:blue\">new</span> MyGraph();            \r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> MyGraph _graph;\r\n\r\n        <span style=\"color:blue\">public</span> MyGraph GraphToVisualize\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _graph; }\r\n            <span style=\"color:blue\">set</span> { _graph = value; RaisePropertyChanged(<span style=\"color:#a31515\">&quot;GraphToVisualize&quot;</span>); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> AddVertex(Data.Object objectToAdd)\r\n        {\r\n            GraphToVisualize.AddVertex(<span style=\"color:blue\">new</span> MyVertexBase() { Name = objectToAdd.ObjName });\r\n        }        \r\n    }\r\n</pre>\r\n<pre><hr></pre>\r\n<pre>This example relies on adding objects / verticies (whatever you want to call them) via the AddVertex() call on my ViewModel (which I get to via drag &amp; drop on the user control), but you could obviously add your verticies however you like.</pre>\r\n<pre>One thing that I don't like about my method (that will be the next thing I fix) is that new verticies show up right on top of eachother.  It'd be nice if they neatly landed next to eachother.</pre>\r\n<pre>Anyway, this should be a good enough end-to-end example to get someone up and running with a custom vertex.</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2010-10-14T21:11:03.053-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683046",
    "ThreadId": "68634",
    "Html": "<p>hi !</p>\r\n<p>i have an abstract class and x classes inheriting from this one.</p>\r\n<p>ive tried to make a datatemplate for each of these classes, but wpf only displays the border with the vertexname in it.</p>\r\n<p>any suggestions how i can make wpf use the datatemplate instead ?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ControlTemplate</span> <span style=\"color: red;\">TargetType</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{x:Type Controls:VertexControl}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Border</span> <span style=\"color: red;\">...</span><span style=\"color: blue;\">&gt;</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: green;\">&lt;!-- ONE OF THE FOLLOWING: --&gt;</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: green;\">&lt;!-- 1, USE CONTROL DIRECTLY --&gt;</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentPresenter</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: red;\">Content</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{TemplateBinding Vertex}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Border</span><span style=\"color: blue;\">&gt;</span></p>",
    "PostedDate": "2011-10-12T04:07:52.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]