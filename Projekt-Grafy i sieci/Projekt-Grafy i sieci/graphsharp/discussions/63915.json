[
  {
    "Id": "217314",
    "ThreadId": "63915",
    "Html": "<p>Has anyone tackled printing the graph that is displayed?&nbsp; Is this possible now or would it require an&nbsp;enhancement?</p>",
    "PostedDate": "2009-07-29T12:06:32.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "243824",
    "ThreadId": "63915",
    "Html": "<p>Hi TBlackbird,</p>\r\n<p>&nbsp;</p>\r\n<p>I wrote a primitive class some time ago from diffrent resources on the net.</p>\r\n<p>If anyone want's to use it, here it is:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Green\">//With these usings...</span>\r\n<span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> QuickGraph;\r\n<span style=\"color:Blue\">using</span> System.Windows.Media;\r\n<span style=\"color:Blue\">using</span> System.Windows;\r\n<span style=\"color:Blue\">using</span> System.Windows.Media.Imaging;\r\n<span style=\"color:Blue\">using</span> System.IO;\r\n\r\n\r\n<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Class handles operations for printing the graph to image.</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Blue\">class</span> GraphToImage\r\n    {\r\n        <span style=\"color:Green\">//Set resolution of image.</span>\r\n        <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">double</span> dpi = 96d;\r\n\r\n        <span style=\"color:Green\">//Set pixelformat of image.</span>\r\n        PixelFormat pixelFormat = PixelFormats.Pbgra32;\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Method exports the graphlayout to an png image.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;path&quot;&gt;</span><span style=\"color:Green\">destination of image&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;surface&quot;&gt;</span><span style=\"color:Green\">graphlayout you want to print&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> ExportToPng(GraphSharp.Controls.GraphLayout surface, Uri path)\r\n        {\r\n            <span style=\"color:Green\">//Save current canvas transform</span>\r\n            Transform transform = surface.LayoutTransform;\r\n\r\n            <span style=\"color:Green\">//Reset current transform (in case it is scaled or rotated)</span>\r\n            surface.LayoutTransform = <span style=\"color:Blue\">null</span>;\r\n\r\n            <span style=\"color:Green\">//Get the size of canvas</span>\r\n            Size size = <span style=\"color:Blue\">new</span> Size(surface.ActualWidth, surface.ActualHeight);\r\n            \r\n            <span style=\"color:Green\">//Measure and arrange the surface</span>\r\n            <span style=\"color:Green\">//VERY IMPORTANT</span>\r\n            surface.Measure(size);\r\n            surface.Arrange(<span style=\"color:Blue\">new</span> Rect(size));\r\n\r\n            <span style=\"color:Green\">//Create a render bitmap and push the surface to it</span>\r\n            RenderTargetBitmap renderBitmap =\r\n              <span style=\"color:Blue\">new</span> RenderTargetBitmap(\r\n                (<span style=\"color:Blue\">int</span>)size.Width,\r\n                (<span style=\"color:Blue\">int</span>)size.Height,\r\n                dpi,\r\n                dpi,\r\n                pixelFormat);\r\n\r\n            <span style=\"color:Green\">//Render the graphlayout onto the bitmap.</span>\r\n            renderBitmap.Render(surface);\r\n\r\n            <span style=\"color:Green\">//Create a file stream for saving image</span>\r\n            <span style=\"color:Blue\">using</span> (FileStream outStream = <span style=\"color:Blue\">new</span> FileStream(path.LocalPath, FileMode.Create))\r\n            {\r\n                <span style=\"color:Green\">//Use png encoder for our data</span>\r\n                PngBitmapEncoder encoder = <span style=\"color:Blue\">new</span> PngBitmapEncoder();\r\n\r\n                <span style=\"color:Green\">//Push the rendered bitmap to it</span>\r\n                encoder.Frames.Add(BitmapFrame.Create(renderBitmap));\r\n                \r\n                <span style=\"color:Green\">//Save the data to the stream</span>\r\n                encoder.Save(outStream);\r\n            }\r\n\r\n            <span style=\"color:Green\">//Restore previously saved layout</span>\r\n            surface.LayoutTransform = transform;\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>And here is where i call the class.</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>GraphToImage graphToImage = <span style=\"color:Blue\">new</span> GraphToImage();\r\n                graphToImage.ExportToPng(graphLayout, <span style=\"color:Blue\">new</span> Uri(((SaveFileDialog)sender).FileName));\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Hope this points someone in the right direction... but its really basic...</p>\r\n<p>Good luck</p>",
    "PostedDate": "2009-10-09T04:11:30.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]