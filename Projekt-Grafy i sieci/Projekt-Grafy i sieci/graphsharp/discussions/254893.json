[
  {
    "Id": "601315",
    "ThreadId": "254893",
    "Html": "\r\n<p>I'm working on an application where I am manually processing the multitouch manipulation events. This is causing me to move, resize, and rotate the vertex objects through RenderTransforms affecting the RenderTransform matrix of the object. The objects respond\r\n correctly to the multitouch now, however the graph does not update. I realized I most likely need have the vertex that has changed alert the graph that it is changing, however that is where I am getting stuck.</p>\r\n<p>I have been digging through the Graph# source code and found its &quot;Graphsharp.Controls.PositionChangedEventArgs&quot; and noticed that the PositionChanged event is actually declared in GraphSharp.Controls.GraphCanvas. However, it appears that no matter what I\r\n have raise the event, I cannot get the event to occur. Either that or the event is occuring and the case is that I have been looking in the wrong area. Here is the event that is manipulating the Vertex (more accurately it is manipulating the VertexControl).\r\n I just want to update the graph (ie move the edges) whenever I perform this event&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<pre>void controlManipulationDelta(object sender, ManipulationDeltaEventArgs e)\r\n        {\r\n            GraphSharp.Controls.VertexControl element = e.Source as GraphSharp.Controls.VertexControl;\r\n\r\n\r\n            NetVertex curVertex = element.Vertex as NetVertex;\r\n\r\n            NetStateLayout curNetStateLayout = element.Parent as NetStateLayout;\r\n\r\n\r\n\r\n            if (curVertex != null)\r\n            {\r\n                //e.DeltaManipulation has the changes \r\n                // Scale is a delta multiplier; 1.0 is last size,  (so 1.1 == scale 10%, 0.8 = shrink 20%) \r\n                // Rotate = Rotation, in degrees\r\n                // Pan = Translation, == Translate offset, in Device Independent Pixels \r\n\r\n                var deltaManipulation = e.DeltaManipulation;\r\n                MatrixTransform curTransform = element.RenderTransform as MatrixTransform;\r\n                System.Windows.Media.Matrix matrix = curTransform.Matrix;\r\n                // find the old center; arguaby this could be cached \r\n                Point center = new Point(element.ActualWidth / 2, element.ActualHeight / 2);\r\n                // transform it to take into account transforms from previous manipulations \r\n                center = matrix.Transform(center);\r\n                //this will be a Zoom. \r\n                matrix.ScaleAt(deltaManipulation.Scale.X, deltaManipulation.Scale.Y, center.X, center.Y);\r\n                // Rotation \r\n                matrix.RotateAt(e.DeltaManipulation.Rotation, center.X, center.Y);\r\n                //Translation (pan) \r\n                matrix.Translate(e.DeltaManipulation.Translation.X, e.DeltaManipulation.Translation.Y);\r\n                \r\n\r\n                \r\n                if (e.DeltaManipulation.Translation.X != 0 || e.DeltaManipulation.Translation.Y != 0)           //translation occured\r\n                {\r\n\r\n                    GraphSharp.Controls.GraphCanvas curCanvas = element.RootCanvas as GraphSharp.Controls.GraphCanvas;\r\n<br></pre>\r\n<pre>                    element.RootCanvas.RaiseEvent(new GraphSharp.Controls.PositionChangedEventArgs(GraphSharp.Controls.GraphCanvas.PositionChangedEvent, element, deltaManipulation.Translation.X, deltaManipulation.Translation.Y));\r\n<span style=\"white-space:pre\">\t\t</span>    element.RaiseEvent(new GraphSharp.Controls.PositionChangedEventArgs(GraphSharp.Controls.GraphCanvas.PositionChangedEvent, element, deltaManipulation.Translation.X, deltaManipulation.Translation.Y))\r\n                   \r\n                }\r\n\r\n                element.RenderTransform = new MatrixTransform(matrix);\r\n\r\n                e.Handled = true;\r\n            }\r\n       }</pre>\r\n<p></p>\r\n",
    "PostedDate": "2011-04-21T15:42:57.81-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]