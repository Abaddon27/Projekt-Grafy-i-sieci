[
  {
    "Id": "843134",
    "ThreadId": "357856",
    "Html": "\r\n<p>Hey guys,</p>\r\n<p>&nbsp;</p>\r\n<p>i was recently searching for multitouch support for Graph#, but didn't find anything except two or three discussions about it with no solution.</p>\r\n<p>Therefore i examined the code of this framework and i think i found the right point to start.</p>\r\n<p>So here's my solution for those of you, that are also trying to add mt to Graph# :)</p>\r\n<p>Open the following file: GraphSharp.Controls -&gt; Themes -&gt; Generic.xaml</p>\r\n<p>Within this file, there's a style defined, that targets VertexControls&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type Controls:VertexControl}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\n</pre>\r\n</div>\r\n<p></p>\r\n<p><span style=\"background-color:white\">and has three special properties defined:</span></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">extbehaviour:DragBehaviour.IsDragEnabled</span><span style=\"color:black\">&quot;</span>\n                <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">True</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">extbehaviour:DragBehaviour.X</span><span style=\"color:black\">&quot;</span>\n                <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding RelativeSource={RelativeSource Self},Path=(Controls:GraphCanvas.X),Mode=TwoWay}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">extbehaviour:DragBehaviour.Y</span><span style=\"color:black\">&quot;</span>\n                <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding RelativeSource={RelativeSource Self},Path=(Controls:GraphCanvas.Y),Mode=TwoWay}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span></pre>\r\n</div>\r\n<p></p>\r\n<p>Those are the properties used for dragging the vertices around.</p>\r\n<p>Now all i have done is writing my own attached behaviour, that listens to touch events instead of mouse events:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"font-family:'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif\"><span style=\"white-space:normal\"><div style=\"color:black; background-color:white\"><pre> <span style=\"color:blue\">class</span> DragTest\n    {\n\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">bool</span> GetDraggable(DependencyObject obj)\n        {\n            <span style=\"color:blue\">return</span> (<span style=\"color:blue\">bool</span>)obj.GetValue(DraggableProperty);\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> SetDraggable(DependencyObject obj, <span style=\"color:blue\">bool</span> value)\n        {\n            obj.SetValue(DraggableProperty, value);\n        }\n\n        <span style=\"color:green\">// Using a DependencyProperty as the backing store for Draggable.  This enables animation, styling, binding, etc...</span>\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty DraggableProperty =\n            DependencyProperty.RegisterAttached(<span style=\"color:#a31515\">&quot;Draggable&quot;</span>, <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">bool</span>), <span style=\"color:blue\">typeof</span>(DragTest), <span style=\"color:blue\">new</span> UIPropertyMetadata(<span style=\"color:blue\">false</span>, OnDraggableChanged));\n\n\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnDraggableChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)\n        {\n            <span style=\"color:blue\">new</span> SimpleDraghandler(o <span style=\"color:blue\">as</span> FrameworkElement);\n        }\n\n        <span style=\"color:blue\">class</span> SimpleDraghandler\n        {\n            <span style=\"color:blue\">private</span> Dictionary&lt;<span style=\"color:blue\">int</span>, Info&gt; touchInfos = <span style=\"color:blue\">new</span> Dictionary&lt;<span style=\"color:blue\">int</span>,Info&gt;();\n           \n            <span style=\"color:blue\">public</span> SimpleDraghandler(FrameworkElement frameworkElement)\n            {\n                frameworkElement.PreviewTouchDown &#43;= <span style=\"color:blue\">this</span>.DragSource_PreviewTouchDown;\n                frameworkElement.PreviewTouchUp &#43;= <span style=\"color:blue\">this</span>.DragSource_PreviewTouchUp;\n                frameworkElement.PreviewTouchMove &#43;= <span style=\"color:blue\">this</span>.DragSource_PreviewTouchMove;\n            }\n\n\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> DragSource_PreviewTouchDown(<span style=\"color:blue\">object</span> sender, System.Windows.Input.TouchEventArgs e)\n            {\n                FrameworkElement findSource = e.OriginalSource <span style=\"color:blue\">as</span> FrameworkElement;\n                VertexControl draggedElement = <span style=\"color:blue\">null</span>;\n\n                <span style=\"color:blue\">while</span> (draggedElement == <span style=\"color:blue\">null</span> &amp;&amp; findSource != <span style=\"color:blue\">null</span>)\n                {\n                    <span style=\"color:blue\">if</span> ((draggedElement = findSource <span style=\"color:blue\">as</span> VertexControl) == <span style=\"color:blue\">null</span>)\n                    {\n                        findSource = VisualTreeHelper.GetParent(findSource) <span style=\"color:blue\">as</span> FrameworkElement;\n                    }\n                }\n\n                <span style=\"color:blue\">if</span> (draggedElement == <span style=\"color:blue\">null</span>)\n                {\n                    <span style=\"color:blue\">return</span>;\n                }\n\n                GraphCanvas parentElement = <span style=\"color:blue\">null</span>;\n                <span style=\"color:blue\">while</span> (parentElement == <span style=\"color:blue\">null</span> &amp;&amp; findSource != <span style=\"color:blue\">null</span>)\n                {\n                    <span style=\"color:blue\">if</span> ((parentElement = findSource <span style=\"color:blue\">as</span> GraphCanvas) == <span style=\"color:blue\">null</span>)\n                    {\n                        findSource = VisualTreeHelper.GetParent(findSource) <span style=\"color:blue\">as</span> FrameworkElement;\n                    }\n                }\n\n                <span style=\"color:blue\">if</span> (parentElement == <span style=\"color:blue\">null</span>)\n                {\n                    <span style=\"color:blue\">return</span>;\n                }\n            \n                <span style=\"color:blue\">if</span>(!touchInfos.ContainsKey(e.TouchDevice.Id))\n                    touchInfos.Add(e.TouchDevice.Id, <span style=\"color:blue\">new</span> Info(draggedElement, parentElement , e.TouchDevice.GetTouchPoint(<span style=\"color:blue\">null</span>).Position));\n                IEnumerable&lt;TouchDevice&gt; devices = draggedElement.TouchesCaptured;\n                <span style=\"color:blue\">if</span> (!devices.Contains(e.TouchDevice))\n                {\n                    draggedElement.CaptureTouch(e.TouchDevice);\n                }\n                e.Handled = <span style=\"color:blue\">true</span>;\n            }\n\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> DragSource_PreviewTouchUp(<span style=\"color:blue\">object</span> sender, System.Windows.Input.TouchEventArgs e)\n            {\n                Info info;\n                touchInfos.TryGetValue(e.TouchDevice.Id, <span style=\"color:blue\">out</span> info);\n                <span style=\"color:blue\">if</span> (info != <span style=\"color:blue\">null</span>)\n                {\n                    info.DraggedElement.ReleaseTouchCapture(e.TouchDevice);\n                    touchInfos.Remove(e.TouchDevice.Id);\n                }\n                e.Handled = <span style=\"color:blue\">true</span>;\n            }\n\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> DragSource_PreviewTouchMove(<span style=\"color:blue\">object</span> sender, System.Windows.Input.TouchEventArgs e)\n            {\n\n                Info info;\n                touchInfos.TryGetValue(e.TouchDevice.Id, <span style=\"color:blue\">out</span> info);\n                <span style=\"color:blue\">if</span> (info != <span style=\"color:blue\">null</span>)\n                {\n                    <span style=\"color:green\">//    Point dragStart = info.DragStartPosition;</span>\n                    Point newPosition = e.GetTouchPoint(<span style=\"color:blue\">null</span>).Position;\n                    Point startPosition = info.ParentElement.PointFromScreen(info.DragStartPosition);\n                    Point currentPosition = info.ParentElement.PointFromScreen(newPosition);\n\n                        <span style=\"color:green\">// falls der finger sich weit genug bewegt hat wird ein DND ausgel�st</span>\n                    <span style=\"color:blue\">if</span> (Math.Abs(startPosition.X - currentPosition.X) &gt; SystemParameters.MinimumHorizontalDragDistance ||\n                            Math.Abs(startPosition.Y - currentPosition.Y) &gt; SystemParameters.MinimumVerticalDragDistance)\n                        {\n                       \n                            info.DragStartPosition = newPosition;\n                            <span style=\"color:green\">//Point currentPos = e.GetTouchPoint(info.ParentElement).Position;</span>\n                            Vector displacement = currentPosition - startPosition;\n                            <span style=\"color:blue\">double</span> currentX = (<span style=\"color:blue\">double</span>)info.DraggedElement.GetValue(GraphCanvas.XProperty);\n                            <span style=\"color:blue\">double</span> currentY = (<span style=\"color:blue\">double</span>)info.DraggedElement.GetValue(GraphCanvas.YProperty);\n               \n               \n                            info.DraggedElement.SetValue(DragTest.DragXProperty, currentX &#43; displacement.X);\n                            info.DraggedElement.SetValue(DragTest.DragYProperty, currentY &#43; displacement.Y);\n\n                        }\n                }\n                e.Handled = <span style=\"color:blue\">true</span>;\n            }\n        }\n\n        <span style=\"color:blue\">class</span> Info\n        {\n            <span style=\"color:blue\">public</span> Point DragStartPosition { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n            <span style=\"color:blue\">public</span> VertexControl DraggedElement { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n            <span style=\"color:blue\">public</span> GraphCanvas ParentElement { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n\n            <span style=\"color:blue\">public</span> Info(VertexControl element, GraphCanvas parentElement, Point dragStartPosition)\n            {\n                DragStartPosition = dragStartPosition;\n                DraggedElement = element;\n                ParentElement = parentElement;\n            }\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">double</span> GetDragX(DependencyObject obj)\n        {\n            <span style=\"color:blue\">return</span> (<span style=\"color:blue\">double</span>)obj.GetValue(DragXProperty);\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> SetDragX(DependencyObject obj, <span style=\"color:blue\">double</span> value)\n        {\n            obj.SetValue(DragXProperty, value);\n        }\n\n        <span style=\"color:green\">// Using a DependencyProperty as the backing store for DragX.  This enables animation, styling, binding, etc...</span>\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty DragXProperty =\n            DependencyProperty.RegisterAttached(<span style=\"color:#a31515\">&quot;DragX&quot;</span>, <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">double</span>), <span style=\"color:blue\">typeof</span>(DragTest));\n\n\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">double</span> GetDragY(DependencyObject obj)\n        {\n            <span style=\"color:blue\">return</span> (<span style=\"color:blue\">double</span>)obj.GetValue(DragYProperty);\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> SetDragY(DependencyObject obj, <span style=\"color:blue\">double</span> value)\n        {\n            obj.SetValue(DragYProperty, value);\n        }\n\n        <span style=\"color:green\">// Using a DependencyProperty as the backing store for DragY.  This enables animation, styling, binding, etc...</span>\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty DragYProperty =\n            DependencyProperty.RegisterAttached(<span style=\"color:#a31515\">&quot;DragY&quot;</span>, <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">double</span>), <span style=\"color:blue\">typeof</span>(DragTest));\n\n    }\n</pre>\n</div>\n<br></span></span></pre>\r\n</div>\r\n<p><span style=\"background-color:white\">Now all i had to do was replacing the above named properties with my own attached property:</span></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Sample:DragTest.Draggable</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">True</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\n <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Sample:DragTest.DragX</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Path=(GraphSharp_Controls:GraphCanvas.X), Mode=TwoWay, RelativeSource={RelativeSource Self}}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\n <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Sample:DragTest.DragY</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Path=(GraphSharp_Controls:GraphCanvas.Y), Mode=TwoWay, RelativeSource={RelativeSource Self}}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span></pre>\r\n</div>\r\n<p>This is my first approach and i know that it is still a little bit buggy, but i hope that it helps those of you who wanted to add mt to Graph# and did'nt know where to start :)</p>\r\n<p>Any suggestions for improvement are welcome :)</p>\r\n<p>With kind regards,</p>\r\n<p>Thomas</p>\r\n",
    "PostedDate": "2012-05-31T07:40:29.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]