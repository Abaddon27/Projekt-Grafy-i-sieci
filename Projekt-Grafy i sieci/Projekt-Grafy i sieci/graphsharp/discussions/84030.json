[
  {
    "Id": "288608",
    "ThreadId": "84030",
    "Html": "<p>Hey guy's.</p>\r\n<p>Hier is some code to print your whole graph to an XPS document. I wont use this to print to printer because it only prints what fits on one page but it works really well to print to XPS.</p>\r\n<p>You will need: Microsoft XML Paper Specification Essentials Pack from:</p>\r\n<p>http://www.microsoft.com/downloads/details.aspx?FamilyId=B8DCFFDD-E3A5-44CC-8021-7649FD37FFEE&amp;displaylang=en</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>            <span style=\"color:Green\">//Print the whole document onto a single huge XPS page.</span>\r\n            PrintDialog printDialog = <span style=\"color:Blue\">new</span> PrintDialog();\r\n\r\n            <span style=\"color:Green\">//Remember to choose the &quot;Microsoft XPS Document Writer&quot;.</span>\r\n            <span style=\"color:Blue\">if</span> (printDialog.ShowDialog() == <span style=\"color:Blue\">true</span>)\r\n            { \r\n                <span style=\"color:Green\">//Change graphLayout to your graphLayout.</span>\r\n                <span style=\"color:Green\">//&quot;My Canvas&quot; is the name of the print item in the queue.</span>\r\n                printDialog.PrintVisual(graphLayout, <span style=\"color:#A31515\">&quot;My Canvas&quot;</span>); \r\n            }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I am busy making functionality to print a graph over multiple pages when it is huge. It would really help if I could GET and SET the X and Y of vertices.</p>\r\n<p>Hope this helps someone.</p>\r\n<p>rootme</p>",
    "PostedDate": "2010-02-10T22:47:36.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "290264",
    "ThreadId": "84030",
    "Html": "<p>Since I was trying the same and have code, I figured I'd share.&nbsp; Please let me know if you see any glaring problems or know of a better way.</p>\r\n<p>First, get the graph as a FixedDocument.&nbsp; This is similar to getting it as an image, but we retain the vectored graphics this way so that when we eventually print, we get crisp graphics.&nbsp; The graph itself is a FrameworkElement so send it in as the parameter:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>\t\t<span style=\"color:Green\">//This is used to get the diagram for printing.  The resulting fixed document will have one page</span>\r\n\t\t<span style=\"color:Green\">//only that contains the diagram at a 1:1 ratio on a custom page size that is just big enough to</span>\r\n\t\t<span style=\"color:Green\">//hold the diagram.  The print dialog uses this to perform the print out by using custom</span>\r\n\t\t<span style=\"color:Green\">//paginators to break the page into printable pages.  It is very much like printing an image,</span>\r\n\t\t<span style=\"color:Green\">//where this returns the image to be printed.  This image, however, uses vectored graphics so it</span>\r\n\t\t<span style=\"color:Green\">//retains its look and feel no matter the size or dots per inch (dpi).</span>\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> FixedDocument GetDocument(FrameworkElement toPrint)\r\n\t\t{\r\n\t\t\tFixedDocument fixedDoc = <span style=\"color:Blue\">new</span> FixedDocument();\r\n\t\t\ttoPrint.Measure(<span style=\"color:Blue\">new</span> Size(<span style=\"color:Blue\">double</span>.PositiveInfinity, <span style=\"color:Blue\">double</span>.PositiveInfinity));\r\n\t\t\ttoPrint.Arrange(<span style=\"color:Blue\">new</span> Rect(<span style=\"color:Blue\">new</span> Point(0, 0), toPrint.DesiredSize));\r\n\r\n\t\t\tSize size = toPrint.DesiredSize;\r\n\t\t\t\r\n\t\t\tVisualBrush vb = <span style=\"color:Blue\">new</span> VisualBrush(toPrint);\r\n\t\t\tvb.Stretch = Stretch.None;\r\n\t\t\tvb.AlignmentX = AlignmentX.Left;\r\n\t\t\tvb.AlignmentY = AlignmentY.Top;\r\n\t\t\tvb.ViewboxUnits = BrushMappingMode.Absolute;\r\n\t\t\tvb.TileMode = TileMode.None;\r\n\t\t\tvb.Viewbox = <span style=\"color:Blue\">new</span> Rect(0, 0, size.Width, size.Height);\r\n\t\t\tPageContent pageContent = <span style=\"color:Blue\">new</span> PageContent();\r\n\t\t\tFixedPage page = <span style=\"color:Blue\">new</span> FixedPage();\r\n\t\t\t((IAddChild)pageContent).AddChild(page);\r\n\t\t\tfixedDoc.Pages.Add(pageContent);\r\n\t\t\tpage.Width = size.Width;\r\n\t\t\tpage.Height = size.Height;\r\n\t\t\tCanvas canvas = <span style=\"color:Blue\">new</span> Canvas();\r\n\t\t\tcanvas.Width = size.Width;\r\n\t\t\tcanvas.Height = size.Height;\r\n\t\t\tcanvas.Background = vb;\r\n\t\t\tpage.Children.Add(canvas);\r\n\r\n\t\t\t<span style=\"color:Blue\">return</span> fixedDoc;\r\n\t\t}\r\n</pre>\r\n</div>\r\n<p>Create a new instance of the below class using the FixedDocument.DocumentPaginator as the first param, Size(816, 1056) as the second for 8.5 by 11 and Thickness(48) for 1/2 inch margins all the way around.&nbsp; Use the instance to print or with a DocumentPageView.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>\t<span style=\"color:Green\">//Breaks the original 1:1 page into as many pages as needed to print out on the device at a 1:1</span>\r\n\t<span style=\"color:Green\">//ratio.</span>\r\n\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> NormalPaginator : DocumentPaginator\r\n\t{\r\n\t\tSize m_PageSize;\r\n\t\tThickness m_Margins;\r\n\t\tDocumentPaginator m_Paginator;\r\n\t\tSize m_ContentArea;\r\n\r\n\t\t<span style=\"color:Blue\">public</span> NormalPaginator(DocumentPaginator paginator, Size pageSize, Thickness margins)\r\n\t\t{\r\n\t\t\tm_PageSize = pageSize;\r\n\t\t\tm_Margins = margins;\r\n\t\t\tm_Paginator = paginator;\r\n\t\t\tm_ContentArea = <span style=\"color:Blue\">new</span> Size(m_PageSize.Width - (m_Margins.Left + m_Margins.Right),\r\n\t\t\t\t\t\t\t\t\t m_PageSize.Height - (m_Margins.Top + m_Margins.Bottom));\r\n\t\t}\r\n\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> DocumentPage GetPage(<span style=\"color:Blue\">int</span> pageNumber)\r\n\t\t{\r\n\t\t\tDocumentPage page = m_Paginator.GetPage(0);\r\n\t\t\t<span style=\"color:Blue\">int</span> rowpagecount = (<span style=\"color:Blue\">int</span>)(Math.Ceiling(page.ContentBox.Width / m_ContentArea.Width));\r\n\t\t\t<span style=\"color:Blue\">int</span> row = pageNumber / rowpagecount;\r\n\t\t\t<span style=\"color:Blue\">int</span> column = pageNumber % rowpagecount;\r\n\r\n\t\t\tContainerVisual newPage = <span style=\"color:Blue\">new</span> ContainerVisual();\r\n\r\n\t\t\tContainerVisual content = <span style=\"color:Blue\">new</span> ContainerVisual();\r\n\t\t\tVisualBrush vb = <span style=\"color:Blue\">new</span> VisualBrush(page.Visual);\r\n\t\t\tvb.Stretch = Stretch.Uniform;\r\n\t\t\tvb.AlignmentX = AlignmentX.Center;\r\n\t\t\tvb.AlignmentY = AlignmentY.Center;\r\n\t\t\tvb.ViewboxUnits = BrushMappingMode.Absolute;\r\n\t\t\tvb.TileMode = TileMode.None;\r\n\t\t\tvb.Viewbox = <span style=\"color:Blue\">new</span> Rect(column * m_ContentArea.Width, row * m_ContentArea.Height, m_ContentArea.Width, m_ContentArea.Height);\r\n\t\t\tCanvas canvas = <span style=\"color:Blue\">new</span> Canvas();\r\n\t\t\tcanvas.Background = vb;\r\n\t\t\tcanvas.Height = m_ContentArea.Height;\r\n\t\t\tcanvas.Width = m_ContentArea.Width;\r\n\t\t\tcanvas.Measure(<span style=\"color:Blue\">new</span> Size(<span style=\"color:Blue\">double</span>.PositiveInfinity, <span style=\"color:Blue\">double</span>.PositiveInfinity));\r\n\t\t\tcanvas.Arrange(<span style=\"color:Blue\">new</span> Rect(<span style=\"color:Blue\">new</span> Point(0, 0), m_ContentArea));\r\n\t\t\tcontent.Children.Add(canvas);\r\n\t\t\tnewPage.Children.Add(content);\r\n\t\t\tnewPage.Transform = <span style=\"color:Blue\">new</span> TranslateTransform(m_Margins.Left, m_Margins.Top);\r\n\r\n\r\n\t\t\t<span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> DocumentPage(newPage, m_PageSize, </pre>\r\n<pre>\t\t\t\t\t      <span style=\"color:Blue\">new</span> Rect(m_Margins.Left, m_Margins.Top, m_ContentArea.Width, m_ContentArea.Height),</pre>\r\n<pre>\t\t\t\t\t      <span style=\"color:Blue\">new</span> Rect(m_Margins.Left, m_Margins.Top, m_ContentArea.Width, m_ContentArea.Height));\r\n\t\t}\r\n\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">bool</span> IsPageCountValid\r\n\t\t{\r\n\t\t\t<span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>; }\r\n\t\t}\r\n\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">int</span> PageCount\r\n\t\t{\r\n\t\t\t<span style=\"color:Blue\">get</span> \r\n\t\t\t{\r\n\t\t\t\tDocumentPage page = m_Paginator.GetPage(0);\r\n\r\n\t\t\t\t<span style=\"color:Blue\">return</span> (<span style=\"color:Blue\">int</span>)(Math.Ceiling(page.ContentBox.Width / m_ContentArea.Width) * </pre>\r\n<pre>\t\t\t\t\t    Math.Ceiling(page.ContentBox.Height / m_ContentArea.Height));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Size PageSize\r\n\t\t{\r\n\t\t\t<span style=\"color:Blue\">get</span>\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color:Blue\">return</span> m_PageSize;\r\n\t\t\t}\r\n\t\t\t<span style=\"color:Blue\">set</span>\r\n\t\t\t{\r\n\t\t\t\tm_PageSize = value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> IDocumentPaginatorSource Source\r\n\t\t{\r\n\t\t\t<span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>; }\r\n\t\t}\r\n\t}\r\n\r\n</pre>\r\n</div>\r\n<p>Hope that helps,</p>\r\n<p>Scott</p>",
    "PostedDate": "2010-02-12T12:01:10.71-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "290733",
    "ThreadId": "84030",
    "Html": "<p>Hey Scott,</p>\r\n<p>Looks good, just 2 things:</p>\r\n<p>1. &quot;...we get crisp graphics...&quot;. Um, I don't. Can't see why. My pages come out blurry and unusable. Maybe I'm missing something.</p>\r\n<p>My vertices have .gif images in them, but it prints fine using my code from above. Maybe it has something to do with the VisualBrush?</p>\r\n<p>2. I just quickly whipped together some code to draw the lines of the print pages on the graph so the user can move vertices away from the edge of the page.</p>\r\n<p>I use the same page size as you to draw the pages but when I print them they are cut off and printed over more than one page. Have a look and please let me know</p>\r\n<p>if you see where I'm going wrong:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>PrintDialog printDialog = <span style=\"color:Blue\">new</span> PrintDialog();\r\n\r\n<span style=\"color:Green\">//Set printable area</span>\r\n<span style=\"color:Blue\">double</span> printableAreaHeight = 1056;\r\n<span style=\"color:Blue\">double</span> printableAreaWidth = 816;\r\n\r\n<span style=\"color:Green\">//Get actual graph width and height.</span>\r\n<span style=\"color:Blue\">double</span> graphWidth = graphLayout.ActualWidth;\r\n<span style=\"color:Blue\">double</span> graphHeight = graphLayout.ActualHeight;\r\n\r\n<span style=\"color:Green\">//Calculate the number of pages high and wide.</span>\r\n<span style=\"color:Blue\">double</span> numPagesHigh = Math.Ceiling(graphHeight / PrintableAreaHeight);\r\n<span style=\"color:Blue\">double</span> numPagesWide = Math.Ceiling(graphWidth / printableAreaWidth);\r\n\r\n<span style=\"color:Green\">//Set the color of the dashed line, with rounded edge's etc.</span>\r\npath.Stroke = Brushes.Black;\r\npath.StrokeDashCap = PenLineCap.Round;\r\npath.StrokeDashOffset = 10;\r\npath.StrokeThickness = 10;\r\n\r\n<span style=\"color:Green\">//Create a stroe array to make the dashed line.</span>\r\npath.StrokeDashArray = <span style=\"color:Blue\">new</span> DoubleCollection() { 5, 8 };\r\n\r\n<span style=\"color:Green\">//Create a new rectangle the size of the printable page.</span>\r\nRect rect = <span style=\"color:Blue\">new</span> Rect(<span style=\"color:Blue\">new</span> Size(printableAreaWidth, printableAreaHeight));\r\n            \r\n<span style=\"color:Green\">//Loop for each row and column to draw the print rectangles on the canvas.</span>\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> pageRow = 0; pageRow &lt; numPagesHigh; pageRow++)\r\n                <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> pageCol = 0; pageCol &lt; numPagesWide; pageCol++)\r\n                {\r\n                    <span style=\"color:Green\">//Create a new rectanglegeometry, set its location and draw it,</span>\r\n                    <span style=\"color:Green\">//also add it to the list in case it needs to be deleted later.</span>\r\n                    RectangleGeometry rec = <span style=\"color:Blue\">new</span> RectangleGeometry(rect);\r\n                    rect.Location = <span style=\"color:Blue\">new</span> Point((printableAreaWidth * pageCol), (printableAreaHeight * pageRow));\r\n                    MainGeometryGroup.Children.Add(rec);\r\n                    g.Add(rec);\r\n                }\r\n\r\n            <span style=\"color:Green\">//Draw the last rectangle in the bottom right.</span>\r\n            RectangleGeometry rec2 = <span style=\"color:Blue\">new</span> RectangleGeometry(rect);\r\n            rect.Location = <span style=\"color:Blue\">new</span> Point((graphWidth - printableAreaWidth), (graphHeight - printableAreaHeight));\r\n            MainGeometryGroup.Children.Add(rec2);\r\n            g.Add(rec2);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Where the following is inside my graph layout in the xaml:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Path</span> <span style=\"color:Red\">Name</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;path&quot;</span> <span style=\"color:Red\">Stroke</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;Gray&quot;</span> <span style=\"color:Red\">StrokeThickness</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;1&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n         &lt;Path.Data&gt;\r\n              &lt;GeometryGroup x:Name=&quot;MainGeometryGroup&quot;/&gt;\r\n         &lt;/Path.Data&gt;\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Path</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Eagerly awaiting your reply!</p>\r\n<p>rootme</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-02-14T23:34:05.197-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "290807",
    "ThreadId": "84030",
    "Html": "<p>Hey Scott,</p>\r\n<p>I started using a DocumentViewer to create a sort of a print preview. When using the DocumentViewer's print, the xps is very blurry, the same issue I'm having with the code you posted.</p>\r\n<p>It seems that my xps looks fine only if I use &quot;PrintVisual&quot;...</p>\r\n<p>Any ideas?</p>\r\n<p>rootme</p>",
    "PostedDate": "2010-02-15T05:06:28.47-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "291287",
    "ThreadId": "84030",
    "Html": "<p>The only issue I can see is the possibility of your GIFs causing issues.&nbsp; I use WPF borders and text blocks for most of mine so they automatically scale, but the routine I sent should just print out as is.&nbsp; Have you tried saving the original 1:1 page and looking at it instead of just after pagination?&nbsp; Something in my pagination routine may be messing up your diagram.&nbsp; If so, I'd like to see your corrected version.</p>\r\n<p>Here was my original version before adding margins and the documentpaginator.&nbsp; It totally goes off the selected printer and prints to the full print area, margins are just the non-printable area.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> FixedDocument GetFixedDocument(FrameworkElement toPrint, PrintDialog printDialog)\r\n\t\t{\r\n\t\t\tPrintCapabilities capabilities = printDialog.PrintQueue.GetPrintCapabilities(printDialog.PrintTicket);\r\n\t\t\tSize pageSize = <span style=\"color:Blue\">new</span> Size(printDialog.PrintableAreaWidth, printDialog.PrintableAreaHeight);\r\n\t\t\tSize visibleSize = <span style=\"color:Blue\">new</span> Size(capabilities.PageImageableArea.ExtentWidth, capabilities.PageImageableArea.ExtentHeight);\r\n\t\t\tFixedDocument fixedDoc = <span style=\"color:Blue\">new</span> FixedDocument();\r\n\t\t\t<span style=\"color:Green\">//If the toPrint visual is not displayed on screen we neeed to measure and arrange it   </span>\r\n\t\t\ttoPrint.Measure(<span style=\"color:Blue\">new</span> Size(<span style=\"color:Blue\">double</span>.PositiveInfinity, <span style=\"color:Blue\">double</span>.PositiveInfinity));\r\n\t\t\ttoPrint.Arrange(<span style=\"color:Blue\">new</span> Rect(<span style=\"color:Blue\">new</span> Point(0, 0), toPrint.DesiredSize));\r\n\t\t\t<span style=\"color:Green\">//   </span>\r\n\t\t\tSize size = toPrint.DesiredSize;\r\n\t\t\t\r\n\t\t\t<span style=\"color:Blue\">double</span> xOffset = 0;\r\n\t\t\t<span style=\"color:Blue\">double</span> yOffset = 0;\r\n\t\t\t<span style=\"color:Blue\">while</span> (yOffset &lt; size.Height)\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color:Blue\">while</span> (xOffset &lt; size.Width)\r\n\t\t\t\t{\r\n\t\t\t\t\tVisualBrush vb = <span style=\"color:Blue\">new</span> VisualBrush(toPrint);\r\n\t\t\t\t\tvb.Stretch = Stretch.None;\r\n\t\t\t\t\tvb.AlignmentX = AlignmentX.Left;\r\n\t\t\t\t\tvb.AlignmentY = AlignmentY.Top;\r\n\t\t\t\t\tvb.ViewboxUnits = BrushMappingMode.Absolute;\r\n\t\t\t\t\tvb.TileMode = TileMode.None;\r\n\t\t\t\t\tvb.Viewbox = <span style=\"color:Blue\">new</span> Rect(xOffset, yOffset, visibleSize.Width, visibleSize.Height);\r\n\t\t\t\t\tPageContent pageContent = <span style=\"color:Blue\">new</span> PageContent();\r\n\t\t\t\t\tFixedPage page = <span style=\"color:Blue\">new</span> FixedPage();\r\n\t\t\t\t\t((IAddChild)pageContent).AddChild(page);\r\n\t\t\t\t\tfixedDoc.Pages.Add(pageContent);\r\n\t\t\t\t\tpage.Width = pageSize.Width;\r\n\t\t\t\t\tpage.Height = pageSize.Height;\r\n\t\t\t\t\tCanvas canvas = <span style=\"color:Blue\">new</span> Canvas();\r\n\t\t\t\t\tFixedPage.SetLeft(canvas, capabilities.PageImageableArea.OriginWidth);\r\n\t\t\t\t\tFixedPage.SetTop(canvas, capabilities.PageImageableArea.OriginHeight);\r\n\t\t\t\t\tcanvas.Width = visibleSize.Width;\r\n\t\t\t\t\tcanvas.Height = visibleSize.Height;\r\n\t\t\t\t\tcanvas.Background = vb;\r\n\t\t\t\t\tpage.Children.Add(canvas);\r\n\t\t\t\t\txOffset += visibleSize.Width;\r\n\t\t\t\t}\r\n\t\t\t\txOffset = 0;\r\n\t\t\t\tyOffset += visibleSize.Height;\r\n\t\t\t}\r\n\t\t\t<span style=\"color:Blue\">return</span> fixedDoc;\r\n\t\t}\r\n\r\n</pre>\r\n</div>\r\n<p>Try it and see if you get different results.</p>\r\n<p>Let me know what you find,</p>\r\n<p>Scott</p>",
    "PostedDate": "2010-02-16T08:39:09.503-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "291345",
    "ThreadId": "84030",
    "Html": "<p>I was looking at your second problem more and noticed that I don't see where you are taking margins into consideration.&nbsp; 816x1056&nbsp;is the ENTIRE 8.5x11&nbsp;page.&nbsp;&nbsp;Most printers&nbsp;have a non-printable area around the page so you can never actually print an entire 8.5x11 page, but slightly smaller.&nbsp; This may be the root of your problems overall.&nbsp; If you try to use zero as your margin, you will encounter problems.&nbsp; The smallest margin you can have is based on the&nbsp;non-printable area, which is printer specific and can actually be different on all 4 sides of the print page.&nbsp; You should always check these for the selected printer (see the PageImageableArea or PrintDocumentImageableArea classes in the Framework) or use an actual margin of your own larger than the non-printable area.&nbsp; On most printers the 1/2 inch margin I had in there will work, but always check your printer to make sure.&nbsp; I had a printer once that would allow nothing less than a 0.55 inch margin on the bottom of the page.</p>",
    "PostedDate": "2010-02-16T10:48:41.48-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "418857",
    "ThreadId": "84030",
    "Html": "<p>Hey,</p>\r\n<p>Sorry, been extremely busy at work: lots of overtime so I did not have much time to work on this lately.</p>\r\n<p>I have good news. I have made an alternative solution for my printing problem: I save it as a good quality PNG image, then split the image into chunks and throw it in a document and voila! It should work for anyone who has similar issues of quality with printing graphics.</p>\r\n<p>I am busy making a class out of it, i.e. headings, page numbers, etc. and will post a beta here soon for scrutiny.</p>\r\n<p>Just running into a slight snag regarding the printable area and margins(image gets clipped): but the solution is in your code(clipping does not happen in your code), I will try sort that out now.</p>\r\n<p>Regarding your previous post about the printer margins being absent: Good point!</p>\r\n<p>Sorry for the long absence.</p>\r\n<p>rootme</p>",
    "PostedDate": "2010-03-16T13:29:56.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "481793",
    "ThreadId": "84030",
    "Html": "<p>Hi rootme,</p>\r\n<p>just wondering if you had code you could make availble to grab the png image at a high resolution</p>\r\n<p>thanks</p>\r\n<p>greycloud</p>",
    "PostedDate": "2010-08-18T04:12:40.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "481941",
    "ThreadId": "84030",
    "Html": "No sorry. Im having problems with quality and high resolution is quite some time away...<br><br><div>On Wed, Aug 18, 2010 at 1:12 PM, GreyCloud <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0pt 0pt 0pt 0.8ex;padding-left:1ex\">   <div> <p>From: GreyCloud</p> <div><p>Hi rootme,</p>\r\n<p>just wondering if you had code you could make availble to grab the png image at a high resolution</p>\r\n<p>thanks</p>\r\n<p>greycloud</p></div> <div> <p>Read the <a href=\"http://graphsharp.codeplex.com/Thread/View.aspx?ThreadId=84030&ANCHOR#Post481793\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:graphsharp@discussions.codeplex.com?subject=[graphsharp:84030]\">graphsharp@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:graphsharp@discussions.codeplex.com\">graphsharp@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/84030\">unsubscribe</a> on CodePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</p> </div> </div> </blockquote></div><br>",
    "PostedDate": "2010-08-18T09:42:54.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "481994",
    "ThreadId": "84030",
    "Html": "<p>I managed to print to png using this code, though changing the DPI in the code does not make the image any larger ?? the code to print to xps above also works though i have yet to&nbsp;try to paginate them correctly when printing.</p>",
    "PostedDate": "2010-08-18T11:55:35.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "490868",
    "ThreadId": "84030",
    "Html": "<p>Just uploaded a patch that contains the print code above in the MainWindow.&nbsp; If you want to see it &quot;live&quot; grab it and try it out.</p>",
    "PostedDate": "2010-09-08T12:29:39.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]