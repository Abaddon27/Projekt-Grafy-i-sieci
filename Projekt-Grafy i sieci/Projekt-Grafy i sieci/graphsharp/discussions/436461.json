[
  {
    "Id": "1014564",
    "ThreadId": "436461",
    "Html": "Hello everyone!<br />\n<br />\nI want to achieve something like in picture below:<br />\n<br />\n<img src=\"http://img22.imageshack.us/img22/8223/94900745.jpg\" alt=\"Image\" /><br />\n<br />\nwhere ICs is my nodes, lines is edges. <br />\nOther elements (switches, resistors, etc) it's doesn't matter.<br />\n<br />\nIn other words, how can i draw the multilines (edges) from (to) <br />\nuser control (node, IC-integrated circuit) in something like this order ?<br />\n<br />\nIn default edges goes from middle of node.<br />\nHow can I set (position) where the line goes from node ?<br />\n<br />\nreg ChrisL<br />\n",
    "PostedDate": "2013-03-13T06:18:20.437-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1014654",
    "ThreadId": "436461",
    "Html": "I have done something similar but not quite the same. In my case I needed the edge to always attach itself to the bottom left corner of a node instead of changing the point it is attached to when you move the node. I did it by using a modified version of the <em>EdgeRouteToPathConverter</em> class and using it to set the template of <em>EdgeControls</em> :<br />\n<pre><code>              &lt;Style TargetType=&quot;{x:Type graphsharp:EdgeControl}&quot;&gt;\n                 ............\n                   &lt;Setter Property=&quot;Template&quot;&gt;\n                        &lt;Setter.Value&gt;\n                            &lt;ControlTemplate TargetType=&quot;{x:Type graphsharp:EdgeControl}&quot;&gt;\n                                &lt;Canvas&gt;\n                                    &lt;Path Stroke=&quot;{TemplateBinding Foreground}&quot;  StrokeThickness=&quot;{TemplateBinding StrokeThickness}&quot;&gt;\n                                        &lt;Path.Data&gt;\n                                            &lt;PathGeometry&gt;\n                                                &lt;PathGeometry.Figures&gt;\n                                                    &lt;MultiBinding Converter=&quot;{StaticResource MyRouteToPathConverter}&quot;&gt;\n                                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;Source.(graphsharp:GraphCanvas.X)&quot; /&gt;\n                                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;Source.(graphsharp:GraphCanvas.Y)&quot; /&gt;\n                                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;Source.ActualWidth&quot; /&gt;\n                                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;Source.ActualHeight&quot; /&gt;\n                                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;Target.(graphsharp:GraphCanvas.X)&quot; /&gt;\n                                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;Target.(graphsharp:GraphCanvas.Y)&quot; /&gt;\n                                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;Target.ActualWidth&quot; /&gt;\n                                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;Target.ActualHeight&quot; /&gt;\n                                                        &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;RoutePoints&quot; /&gt;\n                                                    &lt;/MultiBinding&gt;\n                                                &lt;/PathGeometry.Figures&gt;\n                                            &lt;/PathGeometry&gt;\n                                        &lt;/Path.Data&gt;\n                                    &lt;/Path&gt;\n                                &lt;/Canvas&gt;\n                            &lt;/ControlTemplate&gt;\n                        &lt;/Setter.Value&gt;\n                    &lt;/Setter&gt;\n              ........\n             &lt;/Style&gt;</code></pre>\n\nThe default implementation of the <em>EdgeRouteToPathConverter</em> has two lines like this:<br />\n<pre><code>Point p1 = GraphConverterHelper.CalculateAttachPoint( sourcePos, sourceSize, ( hasRouteInfo ? routeInformation[0] : targetPos ) );\nPoint p2 = GraphConverterHelper.CalculateAttachPoint( targetPos, targetSize, ( hasRouteInfo ? routeInformation[routeInformation.Length - 1] : sourcePos ) );</code></pre>\n\nThese two lines set where the edge is attached on the source and target nodes. In my case I just replaced one of them with the bottom left corner of the source node. You could maybe have one more value or a converter parameter to your  <em>EdgeRouteToPathConverter</em>  (maybe an enumeration of attach points or just an integer) and use it to determine the attach points.\r<br />\n<br />\nHope that helps.<br />\n",
    "PostedDate": "2013-03-13T08:36:55.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1014708",
    "ThreadId": "436461",
    "Html": "Thanks for reply.\r<br />\nCould You publish whole solution ?<br />\n",
    "PostedDate": "2013-03-13T10:21:10.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1015091",
    "ThreadId": "436461",
    "Html": "I can't, sorry, but I think that is the only part of the solution you need. Create your own MultiValueConverter that will be the same as the <em>EdgeRouteToPathConverter</em> except for those two lines calling <em>GraphConverterHelper.CalculateAttachPoint</em> . Your custom edge class could have two properties that specify where it should be attached to the source and the target node, and your own MultiValueConverter could have two more values passed into it along with the existing ones - these properties of your custom edge (they could be just an integer or an enumeration). Then based on these properties in your modification of <em>EdgeRouteToPathConverter</em> you will set the attach points of your source and target nodes (the <em>p1</em> and <em>p2</em> points in the existing <em>EdgeRouteToPathConverter</em>). You also need to set the <em>EdgeControl</em>'s template property to use your <em>EdgeRouteToPathConverter</em> like shown above.<br />\n",
    "PostedDate": "2013-03-14T02:39:14.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]