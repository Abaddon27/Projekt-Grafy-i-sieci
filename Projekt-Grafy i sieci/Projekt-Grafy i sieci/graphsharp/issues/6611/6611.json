{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": "",
    "Description": "To achieve layout of vertexes from left to right. I am writing following code.\n\n[SAMPLE CODE]\n\n try\n                {\n                    layout.OverlapRemovalConstraint = AlgorithmConstraints.Must;\n                }\n                catch (Exception ex)\n                {                 \n                }\n                try\n                {\n                    layout.EdgeRoutingConstraint = AlgorithmConstraints.Must;\n                }\n                catch (Exception ex)\n                { \n                }\n                GraphSharp.Algorithms.OverlapRemoval.OverlapRemovalParameters overlapRemoval = new GraphSharp.Algorithms.OverlapRemoval.OverlapRemovalParameters();\n                overlapRemoval.HorizontalGap = 100;                                 \n                overlapRemoval.VerticalGap = 0;\n                layout.OverlapRemovalParameters = overlapRemoval;  \n\nBOTH STATEMENTS IN TRY CATCH BLOCKS GENERATES FOLLOWING EXCEPTION SO AS A WORK AROUND I WROTE THEM IN TRY CATCH \n\nIndex was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)\n   at System.ThrowHelper.ThrowArgumentOutOfRangeException()\n   at System.Collections.Generic.List`1.get_Item(Int32 index)\n   at GraphSharp.Controls.GraphLayout`3.ChangeState(Int32 stateIndex)\n   at GraphSharp.Controls.GraphLayout`3.RecalculateOverlapRemoval()\n   at GraphSharp.Controls.GraphLayout`3.OverlapRemovalConstraint_PropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)\n   at System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\n   at System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\n   at System.Windows.DependencyObject.NotifyPropertyChange(DependencyPropertyChangedEventArgs args)\n   at System.Windows.DependencyObject.UpdateEffectiveValue(EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry oldEntry, EffectiveValueEntry& newEntry, Boolean coerceWithDeferredReference, OperationType operationType)\n   at System.Windows.DependencyObject.SetValueCommon(DependencyProperty dp, Object value, PropertyMetadata metadata, Boolean coerceWithDeferredReference, OperationType operationType, Boolean isInternal)\n   at System.Windows.DependencyObject.SetValue(DependencyProperty dp, Object value)\n   at GraphSharp.Controls.GraphLayout`3.set_OverlapRemovalConstraint(AlgorithmConstraints value)\n\n\n\nAS OUTPUT I GET ALL VERTEXES FROM LEFT TO RIGHT BUT VERTEXES ARE OVERLAPPING WHICH IS MAKING READABILITY ALMOST IMPOSSIBLE. JUST WONDERING IF THERE IS ANY SOLUTION FOR THIS.\n\ntHANKS",
    "LastUpdatedDate": "2011-07-19T12:26:14.773-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "graphsharp",
    "ReportedDate": "2010-07-15T23:49:43.36-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "vertex overlaping issue",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 6611
  },
  "FileAttachments": [],
  "Comments": []
}