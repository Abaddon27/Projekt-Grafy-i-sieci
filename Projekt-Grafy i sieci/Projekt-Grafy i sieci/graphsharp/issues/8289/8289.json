{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "## Improvement\r\nThe graphical layout in `GraphLayout` should not be performed if the layout is canceled. This could be accomplished in a couple of ways:\r\n* Pass a argument to `OnLayoutFinished` indicating whether the layout was cancelled, and use this value to determine whether to call `OnLayoutIterationFinished(null)`.\r\n* When the operation is cancelled, instead of calling `OnLayoutFinished`, call a new function named `OnLayoutCancelled`. This function should be overridable in derived classes.\r\n\r\n## Rationale\r\nCurrently, `GraphLayout.OnLayoutFinished()` is called whether or not the asynchronous layout computation is cancelled. This means that even if we cancel the layout, the rendering for the layout algorithm will execute, which can take some time depending on the size and complexity of the graph. The current implementation invokes an unnecessary delay in UI responsiveness.\r\n\r\n## Note\r\nI intend to fork and implement this feature myself but I created this issue in case someone else can get to it before me.",
    "LastUpdatedDate": "2013-04-26T07:16:53.753-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "graphsharp",
    "ReportedDate": "2013-04-26T07:16:53.753-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Improvement: Don't perform graphical layout if layout was cancelled",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 8289
  },
  "FileAttachments": [],
  "Comments": []
}