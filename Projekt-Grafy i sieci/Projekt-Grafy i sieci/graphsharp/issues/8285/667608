Index: Source/Graph#.Controls/Controls/GraphLayout.GraphElements.cs
===================================================================
--- Source/Graph#.Controls/Controls/GraphLayout.GraphElements.cs	(revision 72342)
+++ Source/Graph#.Controls/Controls/GraphLayout.GraphElements.cs	(revision 72343)
@@ -138,23 +138,27 @@
         {
             while (_edgesRemoved.Count > 0)
             {
-                var edge = _edgesRemoved.Dequeue();
+                var edge = _edgesRemoved.First();
+                _edgesRemoved.Remove(edge);
                 RemoveEdgeControl(edge);
             }
             while (_verticesRemoved.Count > 0)
             {
-                var vertex = _verticesRemoved.Dequeue();
+                var vertex = _verticesRemoved.First();
+                _verticesRemoved.Remove(vertex);
                 RemoveVertexControl(vertex);
             }
             var verticesToInitPos = _verticesAdded.ToList();
             while (_verticesAdded.Count > 0)
             {
-                var vertex = _verticesAdded.Dequeue();
+                var vertex = _verticesAdded.First();
+                _verticesAdded.Remove(vertex);
                 CreateVertexControl(vertex);
             }
             while (_edgesAdded.Count > 0)
             {
-                var edge = _edgesAdded.Dequeue();
+                var edge = _edgesAdded.First();
+                _edgesAdded.Remove(edge);
                 CreateEdgeControl(edge);
             }
             foreach (var vertex in verticesToInitPos)
@@ -165,31 +169,53 @@
 
         private void OnMutableGraph_EdgeRemoved(TEdge edge)
         {
-            if (_edgeControls.ContainsKey(edge))
+            if (_edgesAdded.Contains(edge))
             {
-                _edgesRemoved.Enqueue(edge);
-                DoNotificationLayout();
+                _edgesAdded.Remove(edge);
             }
+            else
+            {
+                _edgesRemoved.Add(edge);
+            }
+            DoNotificationLayout();
         }
 
         private void OnMutableGraph_EdgeAdded(TEdge edge)
         {
-            _edgesAdded.Enqueue(edge);
+            if (_edgesRemoved.Contains(edge))
+            {
+              _edgesRemoved.Remove(edge);
+            }
+            else
+            {
+              _edgesAdded.Add(edge);
+            }
             DoNotificationLayout();
         }
 
         private void OnMutableGraph_VertexRemoved(TVertex vertex)
         {
-            if (_vertexControls.ContainsKey(vertex))
+            if (_verticesAdded.Contains(vertex))
             {
-                _verticesRemoved.Enqueue(vertex);
-                DoNotificationLayout();
+              _verticesAdded.Remove(vertex);
             }
+            else
+            {
+              _verticesRemoved.Add(vertex);
+            }
+            DoNotificationLayout();
         }
 
         private void OnMutableGraph_VertexAdded(TVertex vertex)
         {
-            _verticesAdded.Enqueue(vertex);
+          if (_verticesRemoved.Contains(vertex))
+            {
+              _verticesRemoved.Remove(vertex);
+            }
+            else
+            {
+              _verticesAdded.Add(vertex);
+            }
             DoNotificationLayout();
         }
 
Index: Source/Graph#.Controls/Controls/GraphLayout.cs
===================================================================
--- Source/Graph#.Controls/Controls/GraphLayout.cs	(revision 72342)
+++ Source/Graph#.Controls/Controls/GraphLayout.cs	(revision 72343)
@@ -56,14 +56,14 @@
         where TGraph : class, IBidirectionalGraph<TVertex, TEdge>
     {
         protected readonly Dictionary<TEdge, EdgeControl> _edgeControls = new Dictionary<TEdge, EdgeControl>();
-        private readonly Queue<TEdge> _edgesAdded = new Queue<TEdge>();
-        private readonly Queue<TEdge> _edgesRemoved = new Queue<TEdge>();
+        private readonly HashSet<TEdge> _edgesAdded = new HashSet<TEdge>();
+        private readonly HashSet<TEdge> _edgesRemoved = new HashSet<TEdge>();
         private readonly List<LayoutState<TVertex, TEdge>> _layoutStates = new List<LayoutState<TVertex, TEdge>>();
         private readonly TimeSpan _notificationLayoutDelay = new TimeSpan(0, 0, 0, 0, 5); // 5 ms
         private readonly object _notificationSyncRoot = new object();
         protected readonly Dictionary<TVertex, VertexControl> _vertexControls = new Dictionary<TVertex, VertexControl>();
-        private readonly Queue<TVertex> _verticesAdded = new Queue<TVertex>();
-        private readonly Queue<TVertex> _verticesRemoved = new Queue<TVertex>();
+        private readonly HashSet<TVertex> _verticesAdded = new HashSet<TVertex>();
+        private readonly HashSet<TVertex> _verticesRemoved = new HashSet<TVertex>();
         private readonly Stopwatch stopWatch = new Stopwatch();
         private DateTime _lastNotificationTimestamp = DateTime.Now;
