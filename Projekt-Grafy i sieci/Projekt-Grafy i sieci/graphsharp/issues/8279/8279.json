{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 2,
    "Custom": null,
    "Description": "Consider having\r\n    GraphLayout<A,B,C> : GraphLayout\r\ninstead of\r\n    GraphLayout : GraphLayout<object, IEdge<object>, IBidirectionalGraph<object, IEdge<object>>>\r\n\r\nThis is consistent with the convention IEnumerable<T> : IEnumerable.  Note that an ItemsControl.ItemsSource is of type IEnumerable.\r\n\r\nA lot of the members of GraphLayout aren't generic, so this should work well, as long as QuickGraph doesn't put you in a box. ",
    "LastUpdatedDate": "2012-04-04T14:27:00.203-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "graphsharp",
    "ReportedDate": "2012-03-27T17:44:23.557-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "GraphLayout<A,B,C> : GraphLayout",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 8279
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Really good idea. I encourage you to provide a pull request for this one. Could you?",
      "PostedDate": "2012-03-27T22:18:30.233-07:00",
      "Id": 60060
    },
    {
      "Message": "I may try to do this in the fork I created.  In general, it seems like GraphLayout does a lot of work that would normally be done in a ViewModel.  For example, Relayout seems like a good candidate to be a command, and usually commands are provided by VMs.  If GraphLayout were to be separated into a view and and a VM, the VM could be generic and the View wouldn't have to be generic.  I'm still thinking this over. ",
      "PostedDate": "2012-04-04T14:27:00.203-07:00",
      "Id": 61392
    }
  ]
}